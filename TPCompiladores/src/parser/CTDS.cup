
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
package parser;
import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import ir.ast.*;
import error.*;
import ir.*;
import ir.semcheck.*;
import tabladesimbolos.*;

   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
action code{:
	/*atributos globales*/
	TablaDeSimbolos tds = new TablaDeSimbolos();
    TypeCheckVisitor visitor = new TypeCheckVisitor();
	Type tipoVar;
	LinkedList<DescriptorSimple> params;

		private void putParameters(){
		if (params!=null){
			for (DescriptorSimple d : params){
				tds.top().put(d.getNombre(),d);
			}
		}
	}
:};
parser code {:
    
	
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, int line, int col) {
   
        StringBuilder m = new StringBuilder("Error");
        if (line >= 0) {                
        	m.append(" in line "+(line+1));   
            if (col >= 0)
            	m.append(", column "+(col+1));
            }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, int line, int col) {
        report_error(message, line, col);
        System.exit(1);
    }


:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).*/

/*LITERALES*/
terminal	Integer  INT_LITERAL; 
terminal	Float  FLOAT_LITERAL;
terminal	String  STRING_LITERAL;
terminal	Character CHAR_LITERAL;
/*OPERADORES*/
terminal    PLUS, MINUS, TIMES, DIVIDE, MOD, AND, OR, NOT, EQ, NOTEQ, GT, LT, EQEQ, LTEQ, GTEQ, PLUSEQ, MINUSEQ;
/*SEPARADORES*/
terminal	SEMI,COMMA, LPAREN, RPAREN, LKEY, RKEY, LBRACKET, RBRACKET;	
/*PALABRAS RESERVADAS*/
terminal	BOOLEAN, BREAK, CLASS, CONTINUE, ELSE, IF, FOR, WHILE, FLOAT, INT, RETURN, VOID, EXTERNINVK;
terminal	Boolean TRUE;
terminal	Boolean FALSE;
/*IDENTIFICADORES*/
terminal	String IDENTIFIER;
   
/* Non terminals used in the grammar section.*/
non terminal       program, decl, field_decl,  method_decl, externinvk_arg, id_sequence;
non terminal LinkedList<Object> externinvk_arg_sequence;
non terminal LinkedList<Expression> expr_sequence;
non terminal LinkedList<DescriptorSimple> parameters ;
non terminal LinkedList<Statement>  statement_decl;
non terminal Type type;
non terminal MethodCall method_call;
non terminal Location location; 
non terminal VarLocation location_decl, method;
non terminal Expression expr;
non terminal Extern extern;
non terminal Statement statement;
non terminal Block block, block_content ;
non terminal String id;
 
/*operadores*/
non terminal 	UnaryOpType unary_op;
non terminal 	BinOpType bin_op, arith_op, rel_op, eq_op, cond_op; 
non terminal	AssignOpType assign_op;
/*literales*/
non terminal 	Literal literal;
non terminal 	IntLiteral int_literal;
non terminal 	BoolLiteral bool_literal;
non terminal 	FloatLiteral float_literal;
non terminal 	String string_literal;

   

/* -------------Precedence and Associatively of Terminals Section----------- */

precedence left OR;
precedence left AND;
precedence left LT, GT, LTEQ, GTEQ, NOTEQ, EQEQ;
precedence left PLUS, MINUS;   
precedence left TIMES, DIVIDE, MOD;
precedence left NOT, MINUS;

/* ----------------------------Grammar Section-------------------- */
   
   
   program ::= CLASS id LKEY {: tds.push(new Ambiente());:} decl  RKEY {:tds.pop(); visitor.showErrors();:}
			   |CLASS id LKEY RKEY;

   decl ::= field_decl
			| method_decl
			| field_decl method_decl;


   field_decl ::= type id_sequence	SEMI
				 | field_decl type id_sequence SEMI;

   id_sequence ::= location_decl:l {: tds.top().put(l.getId(),l.getDesc()) ;:}
				| id_sequence COMMA location_decl:l {: tds.top().put(l.getId(),l.getDesc()) ;:};


   location_decl ::= id:i {: 
						if (tds.top().get(i)==null)
								RESULT = new VarLocation(i,new DescriptorSimple(i,tipoVar)) ;
							else
								parser.report_fatal_error("Variable redeclarada",ileft,iright);:}
				| id:i LBRACKET int_literal:il RBRACKET {: 
						if (tds.top().get(i)==null)
								RESULT = new VarLocation(i,new DescriptorArreglo(i,tipoVar,il.getValue())) ;
							else
								parser.report_fatal_error("Variable redeclarada",ileft,iright);:} ;
	

   method_decl ::= method:m {: tds.top().put(m.getId(),m.getDesc()) ;:}
					| method_decl:md method:m {: tds.top().put(m.getId(),m.getDesc()) ;:};

   method	 ::= type:t id:i LPAREN RPAREN block:b {:  
						if (tds.top().get(i)==null)
								RESULT = new VarLocation(i,b,new DescriptorFuncion(i,t,null)) ;
							else
								parser.report_fatal_error("Metodo redeclarado",ileft,iright); :}
				    |VOID id:i LPAREN RPAREN block:b {:  
						if (tds.top().get(i)==null)
								RESULT = new VarLocation(i,b,new DescriptorFuncion(i,Type.VOID,null)) ;
							else 
								parser.report_fatal_error("Metodo redeclarado",ileft,iright); :} 
					| VOID id:i LPAREN parameters:p  {:params = p;:} RPAREN block:b {:  
						if (tds.top().get(i)==null)
								RESULT = new VarLocation(i,b,new DescriptorFuncion(i,Type.VOID,p)) ;
							else
								parser.report_fatal_error("Metodo redeclarado",ileft,iright);
						params = null; :}  
					| type:t id:i LPAREN parameters:p {:params = p;:} RPAREN block:b {:  
						if (tds.top().get(i)==null)
								RESULT = new VarLocation(i,b,new DescriptorFuncion(i,t,p)) ;
							else
								parser.report_fatal_error("Metodo redeclarado",ileft,iright);
						params = null; :}  ;

   parameters ::= type:t id:i {: LinkedList<DescriptorSimple> l = new LinkedList<DescriptorSimple>() ;
								l.add(new DescriptorSimple(i,t));
								RESULT = l; :}
				| parameters:p COMMA type:t id:i {:  p.add(new DescriptorSimple(i,t));
											RESULT = p ; :};


   block ::=  LKEY {:tds.push(new Ambiente()) ; putParameters();:} block_content:b  {:if (!visitor.visit(b).isUndefined()) RESULT = b;:}RKEY {:tds.pop();
																		  :} ;

   block_content ::= statement_decl:sd {: RESULT = new Block(sd);:}
					| field_decl  {: RESULT = new Block(null);:}
					| field_decl statement_decl:sd  {: RESULT = new Block(sd);:}
					|{: RESULT = new Block(null);:};

   type ::= INT {:tipoVar = Type.INT;  RESULT = Type.INT ; :}
			| FLOAT {:tipoVar = Type.FLOAT; RESULT = Type.FLOAT ; :}
			| BOOLEAN {:tipoVar = Type.BOOL; RESULT = Type.BOOL ; :};

   statement_decl ::= statement:s {: LinkedList<Statement> l = new LinkedList<Statement>() ;
									l.add(s);
									RESULT = l; :} 
						| statement_decl:sd statement:s {:  sd.add(s);
															RESULT = sd ; :};

   statement ::= location:loc assign_op:aop expr:e SEMI {: RESULT = new AssignStmt(loc,aop,e) ; :}
			| method_call:m SEMI {: RESULT = new MethodCallStmt(m) ; :}
			| extern:e SEMI {: RESULT = new ExternStmt(e) ; :}
			| IF LPAREN expr:e RPAREN block:b1 ELSE block:b2 {: RESULT = new IfStmt(e,b1,b2) ; :}
			| IF LPAREN expr:e RPAREN block:b {: RESULT = new IfStmt(e,b) ; :}
			| FOR id:i EQ expr:e COMMA expr:c block:b {:Descriptor d = tds.search(i);
														if(d != null)
															if(d.getClase().equals("descriptorSimple")){ 
																if(d.getTipo() == Type.INT)
																	RESULT = new ForStmt(i,e,c,b); }
															else
																parser.report_fatal_error("Los tipos no concuerdan",ileft,iright);
														else
															parser.report_fatal_error("Variable no declarada",ileft,iright); :}
			| WHILE expr:e block:b {: RESULT = new WhileStmt(b,e) ; :}
			| RETURN expr:e SEMI {: RESULT = new ReturnStmt(e) 	; :}
			| RETURN SEMI	{: RESULT = new ReturnStmt(); :}
			| BREAK SEMI    {: RESULT = new BreakStmt() ; :}
			| CONTINUE SEMI {: RESULT = new ContinueStmt() ; :}
			| SEMI  {: RESULT = new SkipStmt() ; :}
			| block:b {: RESULT = b ; :};


	assign_op ::= EQ {: RESULT = AssignOpType.ASSIGN;:}
				 | PLUSEQ  {: RESULT = AssignOpType.INCREMENT;:}
				 | MINUSEQ  {: RESULT = AssignOpType.DECREMENT;:};

	method_call ::= id:i LPAREN RPAREN {: Descriptor d = tds.search(i);
										if (d!=null)
											if (d.getClase().equals("descriptorFuncion"))
												RESULT = new MethodCall(i,d.getTipo(),null) ;
											else
												parser.report_fatal_error("Funcion no declarada",ileft,iright);		
										else
											parser.report_fatal_error("Los tipos no concuerdan",ileft,iright); :}
				| id:i LPAREN expr_sequence:l RPAREN {: Descriptor d = tds.search(i);
										if (d!=null)
											if (d.getClase().equals("descriptorFuncion"))
												RESULT = new MethodCall(i,d.getTipo(),l) ;
											else
												parser.report_fatal_error("Funcion no declarada",ileft,iright);			
										else
											parser.report_fatal_error("Los tipos no concuerdan",ileft,iright); :};

	extern ::=  EXTERNINVK LPAREN string_literal:s COMMA type:t RPAREN {: RESULT = new Extern(s,t,null)  ;:}
				| EXTERNINVK LPAREN string_literal:s COMMA VOID RPAREN {: RESULT = new Extern(s,Type.VOID,null)  ;:}
				| EXTERNINVK LPAREN string_literal:s COMMA type:t COMMA externinvk_arg_sequence:l RPAREN {: RESULT = new Extern(s,t,l)  ;:}
				| EXTERNINVK LPAREN string_literal:s COMMA VOID COMMA externinvk_arg_sequence:l RPAREN {: RESULT = new Extern(s,Type.VOID,l)  ;:};

	location ::= id:i {:  Descriptor d = tds.search(i);
						if (d!=null)
							if (d.getClase().equals("descriptorSimple"))
								RESULT = new VarLocation(i,d);
							else
								parser.report_fatal_error("Los tipos no concuerdan",ileft,iright);				
						else
							parser.report_fatal_error("Variable no declarada",ileft,iright); :} 
				| id:i LBRACKET expr RBRACKET {:  Descriptor d = tds.search(i);
						if (d!=null)
							if (d.getClase().equals("descriptorArreglo"))
								RESULT = new VarLocation(i,d); 
							else
								parser.report_fatal_error("Los tipos no concuerdan",ileft,iright);				
						else
							parser.report_fatal_error("Variable no declarada",ileft,iright);:}  ;

	expr_sequence ::= expr:e {: LinkedList<Expression> l = new LinkedList<Expression>() ;
								l.add(e);
								RESULT = l; :} 
					| expr_sequence:es COMMA expr:e {: es.add(e); 
													RESULT = es  ;:} ; 
 
	expr ::= location:loc {: RESULT =loc ; :}
		 | method_call:mc {: RESULT = mc ; :}
		 | extern:e {: RESULT = e  ;:}
		 | literal:l {: RESULT =l ; :} 
		 | expr:e bin_op:op expr:e2 {: RESULT = new BinOpExpr(e,op,e2) ; :}
		 | unary_op:op expr:e {: RESULT = new UnaryOpExpr(op,e) ; :}
		 | LPAREN expr:e RPAREN  {: RESULT = e; :};

	externinvk_arg_sequence ::= externinvk_arg:e {: LinkedList<Object> l = new LinkedList<Object>() ;
													l.add(e);
													RESULT = l; :}  
								| externinvk_arg_sequence:es COMMA externinvk_arg:e {: es.add(e); 
																					RESULT = es  ;:} ; 
		 
	externinvk_arg ::= expr:e {: RESULT = e  ;:} 
					| string_literal:s {: RESULT = s  ;:};
	
	unary_op ::= NOT {: RESULT = UnaryOpType.NOT  ;:}
				| MINUS {: RESULT = UnaryOpType.MINUS  ;:};
	bin_op ::= arith_op:ao {: RESULT = ao  ;:}
				| rel_op:ro {: RESULT = ro ;:}
				| eq_op:eo {: RESULT = eo  ;:} 
				 | cond_op:co {: RESULT = co  ;:};
	arith_op ::= PLUS {: RESULT = BinOpType.PLUS  ;:}
				| MINUS{: RESULT = BinOpType.MINUS  ;:}
				 | TIMES {: RESULT = BinOpType.TIMES  ;:}
				| MOD {: RESULT = BinOpType.MOD  ;:}
				| DIVIDE {: RESULT = BinOpType.DIVIDE  ;:};
	rel_op ::= LT {: RESULT = BinOpType.LT  ;:}
			  | GT {: RESULT = BinOpType.GT  ;:} 
			  | LTEQ {: RESULT = BinOpType.LTEQ  ;:}
			  | GTEQ {: RESULT = BinOpType.GTEQ  ;:};
	eq_op ::= EQEQ {: RESULT = BinOpType.EQEQ  ;:} 
			  | NOTEQ {: RESULT = BinOpType.NOTEQ  ;:} ;
	cond_op ::= AND {: RESULT = BinOpType.AND  ;:} 
				| OR {: RESULT = BinOpType.OR  ;:};
	literal ::= int_literal:il {: RESULT = il ; :} | float_literal:fl {: RESULT = fl ; :} | bool_literal:bl {: RESULT = bl ; :};
	id ::= IDENTIFIER:i {: RESULT = i ;:};
	int_literal ::= INT_LITERAL:n {: RESULT = new IntLiteral(n) ;:};
	bool_literal ::= TRUE:t {: RESULT = new BoolLiteral(t) ;:} 
					| FALSE:f {: RESULT = new BoolLiteral(f) ;:} ;
	float_literal ::= FLOAT_LITERAL:f {: RESULT = new FloatLiteral(f);:} ;
	string_literal ::= STRING_LITERAL:s {: RESULT = s ;:};
