
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 18 11:32:36 ART 2014
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import ir.ast.*;
import tabladesimbolos.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 18 11:32:36 ART 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\043\002\000\002\002\010\000\002\002" +
    "\004\000\002\002\006\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\004\005\000\002\004\006\000" +
    "\002\007\003\000\002\007\005\000\002\017\003\000\002" +
    "\017\006\000\002\005\003\000\002\005\004\000\002\020" +
    "\007\000\002\020\007\000\002\020\010\000\002\020\010" +
    "\000\002\012\004\000\002\012\006\000\002\044\002\000" +
    "\002\024\006\000\002\025\003\000\002\025\003\000\002" +
    "\025\004\000\002\025\002\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\013\003\000\002\013\004" +
    "\000\002\023\006\000\002\023\004\000\002\023\004\000" +
    "\002\023\011\000\002\023\007\000\002\023\011\000\002" +
    "\023\005\000\002\023\005\000\002\023\004\000\002\023" +
    "\004\000\002\023\004\000\002\023\003\000\002\023\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\015\005\000\002\015\006\000\002\022\010\000\002" +
    "\022\010\000\002\022\012\000\002\022\012\000\002\016" +
    "\003\000\002\016\006\000\002\011\003\000\002\011\005" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\005\000\002\021\004\000\002" +
    "\021\005\000\002\010\003\000\002\010\005\000\002\006" +
    "\003\000\002\006\003\000\002\027\003\000\002\027\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\033\003\000\002\033\003\000\002\034\003\000" +
    "\002\034\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\026\003\000\002\037\003\000\002\040" +
    "\003\000\002\040\003\000\002\041\003\000\002\042\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\004\043\005\001\002\000\004\002\255\001" +
    "\002\000\004\060\006\001\002\000\060\010\uffa6\011\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6" +
    "\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\037" +
    "\uffa6\040\uffa6\001\002\000\004\035\010\001\002\000\014" +
    "\036\012\041\001\051\001\052\001\054\001\001\002\000" +
    "\012\041\015\051\022\052\014\054\016\001\002\000\004" +
    "\002\ufffe\001\002\000\014\036\ufff4\041\ufff4\051\ufff4\052" +
    "\ufff4\054\ufff4\001\002\000\010\032\uffe6\034\uffe6\060\uffe6" +
    "\001\002\000\010\032\uffe4\034\uffe4\060\uffe4\001\002\000" +
    "\004\060\006\001\002\000\004\060\006\001\002\000\004" +
    "\036\245\001\002\000\014\036\ufffc\041\015\051\022\052" +
    "\014\054\016\001\002\000\010\032\uffe5\034\uffe5\060\uffe5" +
    "\001\002\000\014\036\ufffd\041\015\051\022\052\014\054" +
    "\016\001\002\000\014\036\ufffb\041\015\051\022\052\014" +
    "\054\016\001\002\000\004\060\006\001\002\000\006\031" +
    "\241\032\220\001\002\000\006\031\ufff8\032\ufff8\001\002" +
    "\000\012\031\ufff6\032\ufff6\033\031\037\032\001\002\000" +
    "\012\034\036\041\015\051\022\052\014\001\002\000\004" +
    "\004\033\001\002\000\046\010\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\021\uffa5\022\uffa5\023\uffa5" +
    "\024\uffa5\025\uffa5\026\uffa5\031\uffa5\032\uffa5\034\uffa5\035" +
    "\uffa5\040\uffa5\001\002\000\004\040\035\001\002\000\006" +
    "\031\ufff5\032\ufff5\001\002\000\004\035\043\001\002\000" +
    "\004\060\006\001\002\000\006\032\041\034\042\001\002" +
    "\000\010\041\015\051\022\052\014\001\002\000\004\035" +
    "\043\001\002\000\036\031\uffec\035\uffec\036\uffec\041\uffec" +
    "\042\uffec\044\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052" +
    "\uffec\053\uffec\055\uffec\060\uffec\001\002\000\014\036\uffef" +
    "\041\uffef\051\uffef\052\uffef\054\uffef\001\002\000\036\031" +
    "\054\035\043\036\uffe7\041\015\042\063\044\050\046\060" +
    "\047\066\050\055\051\022\052\014\053\056\055\064\060" +
    "\006\001\002\000\004\031\234\001\002\000\010\020\226" +
    "\027\227\030\230\001\002\000\004\031\225\001\002\000" +
    "\030\031\uffe3\035\uffe3\036\uffe3\042\uffe3\044\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\053\uffe3\055\uffe3\060\uffe3\001\002\000" +
    "\036\031\054\035\043\036\uffe9\041\015\042\063\044\050" +
    "\046\060\047\066\050\055\051\022\052\014\053\056\055" +
    "\064\060\006\001\002\000\004\060\006\001\002\000\030" +
    "\031\uffd6\035\uffd6\036\uffd6\042\uffd6\044\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\053\uffd6\055\uffd6\060\uffd6\001\002\000\024" +
    "\004\033\005\107\011\103\017\077\033\101\055\064\056" +
    "\100\057\102\060\006\001\002\000\026\004\033\005\107" +
    "\011\103\017\077\031\212\033\101\055\064\056\100\057" +
    "\102\060\006\001\002\000\004\036\210\001\002\000\004" +
    "\033\202\001\002\000\030\031\uffd5\035\uffd5\036\uffd5\042" +
    "\uffd5\044\uffd5\046\uffd5\047\uffd5\050\uffd5\053\uffd5\055\uffd5" +
    "\060\uffd5\001\002\000\060\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\170\034\uffcb\035\uffcb\037\171\040\uffcb" +
    "\001\002\000\004\031\167\001\002\000\004\033\144\001" +
    "\002\000\030\031\054\035\043\036\uffea\042\063\044\050" +
    "\046\060\047\066\050\055\053\056\055\064\060\006\001" +
    "\002\000\004\060\006\001\002\000\004\031\070\001\002" +
    "\000\030\031\uffdf\035\uffdf\036\uffdf\042\uffdf\044\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\053\uffdf\055\uffdf\060\uffdf\001\002" +
    "\000\004\020\072\001\002\000\024\004\033\005\107\011" +
    "\103\017\077\033\101\055\064\056\100\057\102\060\006" +
    "\001\002\000\046\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\031\uffc6\032\uffc6\034\uffc6\035\uffc6\040" +
    "\uffc6\001\002\000\046\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\031\uffc7\032\uffc7\034\uffc7\035\uffc7" +
    "\040\uffc7\001\002\000\046\010\uffa8\011\uffa8\012\uffa8\013" +
    "\uffa8\014\uffa8\015\uffa8\016\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\031\uffa8\032\uffa8\034\uffa8\035" +
    "\uffa8\040\uffa8\001\002\000\036\010\121\011\132\012\113" +
    "\013\131\014\114\015\115\016\123\021\122\022\125\023" +
    "\116\024\134\025\130\026\133\032\140\001\002\000\024" +
    "\004\uffbc\005\uffbc\011\uffbc\017\uffbc\033\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\001\002\000\046\010\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\031\uffa4\032\uffa4" +
    "\034\uffa4\035\uffa4\040\uffa4\001\002\000\024\004\033\005" +
    "\107\011\103\017\077\033\101\055\064\056\100\057\102" +
    "\060\006\001\002\000\046\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\031\uffa3\032\uffa3\034\uffa3\035" +
    "\uffa3\040\uffa3\001\002\000\024\004\uffbb\005\uffbb\011\uffbb" +
    "\017\uffbb\033\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\001" +
    "\002\000\046\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\031\uffa7\032\uffa7\034\uffa7\035\uffa7\040\uffa7" +
    "\001\002\000\046\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\016\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9" +
    "\025\uffa9\026\uffa9\031\uffa9\032\uffa9\034\uffa9\035\uffa9\040" +
    "\uffa9\001\002\000\046\010\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\031\uffc4\032\uffc4\034\uffc4\035\uffc4" +
    "\040\uffc4\001\002\000\046\010\uffa2\011\uffa2\012\uffa2\013" +
    "\uffa2\014\uffa2\015\uffa2\016\uffa2\021\uffa2\022\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\031\uffa2\032\uffa2\034\uffa2\035" +
    "\uffa2\040\uffa2\001\002\000\046\010\uffc5\011\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\016\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\031\uffc5\032\uffc5\034\uffc5" +
    "\035\uffc5\040\uffc5\001\002\000\024\004\033\005\107\011" +
    "\103\017\077\033\101\055\064\056\100\057\102\060\006" +
    "\001\002\000\046\010\121\011\132\012\113\013\131\014" +
    "\114\015\115\016\123\021\122\022\125\023\116\024\134" +
    "\025\130\026\133\031\uffc2\032\uffc2\034\uffc2\035\uffc2\040" +
    "\uffc2\001\002\000\024\004\uffb4\005\uffb4\011\uffb4\017\uffb4" +
    "\033\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\001\002\000" +
    "\024\004\uffb3\005\uffb3\011\uffb3\017\uffb3\033\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\001\002\000\024\004\uffab\005" +
    "\uffab\011\uffab\017\uffab\033\uffab\055\uffab\056\uffab\057\uffab" +
    "\060\uffab\001\002\000\024\004\uffb1\005\uffb1\011\uffb1\017" +
    "\uffb1\033\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\001\002" +
    "\000\024\004\033\005\107\011\103\017\077\033\101\055" +
    "\064\056\100\057\102\060\006\001\002\000\024\004\uffb8" +
    "\005\uffb8\011\uffb8\017\uffb8\033\uffb8\055\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\001\002\000\024\004\uffb6\005\uffb6\011\uffb6" +
    "\017\uffb6\033\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\001" +
    "\002\000\024\004\uffac\005\uffac\011\uffac\017\uffac\033\uffac" +
    "\055\uffac\056\uffac\057\uffac\060\uffac\001\002\000\024\004" +
    "\uffaa\005\uffaa\011\uffaa\017\uffaa\033\uffaa\055\uffaa\056\uffaa" +
    "\057\uffaa\060\uffaa\001\002\000\024\004\uffb9\005\uffb9\011" +
    "\uffb9\017\uffb9\033\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9" +
    "\001\002\000\024\004\uffb0\005\uffb0\011\uffb0\017\uffb0\033" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\001\002\000\024" +
    "\004\uffba\005\uffba\011\uffba\017\uffba\033\uffba\055\uffba\056" +
    "\uffba\057\uffba\060\uffba\001\002\000\024\004\uffb7\005\uffb7" +
    "\011\uffb7\017\uffb7\033\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\001\002\000\024\004\uffaf\005\uffaf\011\uffaf\017\uffaf" +
    "\033\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\001\002\000" +
    "\024\004\uffb2\005\uffb2\011\uffb2\017\uffb2\033\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\001\002\000\024\004\uffb5\005" +
    "\uffb5\011\uffb5\017\uffb5\033\uffb5\055\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\001\002\000\024\004\uffae\005\uffae\011\uffae\017" +
    "\uffae\033\uffae\055\uffae\056\uffae\057\uffae\060\uffae\001\002" +
    "\000\024\004\uffad\005\uffad\011\uffad\017\uffad\033\uffad\055" +
    "\uffad\056\uffad\057\uffad\060\uffad\001\002\000\046\010\121" +
    "\011\132\012\113\013\131\014\114\015\115\016\123\021" +
    "\122\022\125\023\116\024\134\025\130\026\133\031\uffc3" +
    "\032\uffc3\034\uffc3\035\uffc3\040\uffc3\001\002\000\036\010" +
    "\121\011\132\012\113\013\131\014\114\015\115\016\123" +
    "\021\122\022\125\023\116\024\134\025\130\026\133\034" +
    "\137\001\002\000\046\010\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\016\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\031\uffc1\032\uffc1\034\uffc1\035\uffc1" +
    "\040\uffc1\001\002\000\024\004\033\005\107\011\103\017" +
    "\077\033\101\055\064\056\100\057\102\060\006\001\002" +
    "\000\036\010\121\011\132\012\113\013\131\014\114\015" +
    "\115\016\123\021\122\022\125\023\116\024\134\025\130" +
    "\026\133\035\043\001\002\000\030\031\uffdc\035\uffdc\036" +
    "\uffdc\042\uffdc\044\uffdc\046\uffdc\047\uffdc\050\uffdc\053\uffdc" +
    "\055\uffdc\060\uffdc\001\002\000\030\031\uffe2\035\uffe2\036" +
    "\uffe2\042\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2\053\uffe2" +
    "\055\uffe2\060\uffe2\001\002\000\004\006\146\001\002\000" +
    "\004\032\147\001\002\000\006\032\uffa1\034\uffa1\001\002" +
    "\000\012\041\015\051\022\052\014\054\151\001\002\000" +
    "\006\032\163\034\164\001\002\000\006\032\152\034\153" +
    "\001\002\000\026\004\033\005\107\006\146\011\103\017" +
    "\077\033\101\055\064\056\100\057\102\060\006\001\002" +
    "\000\046\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\031\uffce\032\uffce\034\uffce\035\uffce\040\uffce\001" +
    "\002\000\040\010\121\011\132\012\113\013\131\014\114" +
    "\015\115\016\123\021\122\022\125\023\116\024\134\025" +
    "\130\026\133\032\uffbe\034\uffbe\001\002\000\006\032\160" +
    "\034\161\001\002\000\006\032\uffc0\034\uffc0\001\002\000" +
    "\006\032\uffbd\034\uffbd\001\002\000\026\004\033\005\107" +
    "\006\146\011\103\017\077\033\101\055\064\056\100\057" +
    "\102\060\006\001\002\000\046\010\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\031\uffcc\032\uffcc\034\uffcc" +
    "\035\uffcc\040\uffcc\001\002\000\006\032\uffbf\034\uffbf\001" +
    "\002\000\026\004\033\005\107\006\146\011\103\017\077" +
    "\033\101\055\064\056\100\057\102\060\006\001\002\000" +
    "\046\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\031\uffcf\032\uffcf\034\uffcf\035\uffcf\040\uffcf\001\002" +
    "\000\006\032\160\034\166\001\002\000\046\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\031\uffcd\032" +
    "\uffcd\034\uffcd\035\uffcd\040\uffcd\001\002\000\030\031\uffd8" +
    "\035\uffd8\036\uffd8\042\uffd8\044\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\053\uffd8\055\uffd8\060\uffd8\001\002\000\026\004\033" +
    "\005\107\011\103\017\077\033\101\034\175\055\064\056" +
    "\100\057\102\060\006\001\002\000\024\004\033\005\107" +
    "\011\103\017\077\033\101\055\064\056\100\057\102\060" +
    "\006\001\002\000\036\010\121\011\132\012\113\013\131" +
    "\014\114\015\115\016\123\021\122\022\125\023\116\024" +
    "\134\025\130\026\133\040\173\001\002\000\054\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\034\uffca\035\uffca\040" +
    "\uffca\001\002\000\040\010\121\011\132\012\113\013\131" +
    "\014\114\015\115\016\123\021\122\022\125\023\116\024" +
    "\134\025\130\026\133\032\uffc9\034\uffc9\001\002\000\046" +
    "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\031\uffd1\032\uffd1\034\uffd1\035\uffd1\040\uffd1\001\002\000" +
    "\006\032\177\034\200\001\002\000\024\004\033\005\107" +
    "\011\103\017\077\033\101\055\064\056\100\057\102\060" +
    "\006\001\002\000\046\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\031\uffd0\032\uffd0\034\uffd0\035\uffd0" +
    "\040\uffd0\001\002\000\040\010\121\011\132\012\113\013" +
    "\131\014\114\015\115\016\123\021\122\022\125\023\116" +
    "\024\134\025\130\026\133\032\uffc8\034\uffc8\001\002\000" +
    "\024\004\033\005\107\011\103\017\077\033\101\055\064" +
    "\056\100\057\102\060\006\001\002\000\036\010\121\011" +
    "\132\012\113\013\131\014\114\015\115\016\123\021\122" +
    "\022\125\023\116\024\134\025\130\026\133\034\204\001" +
    "\002\000\004\035\043\001\002\000\032\031\uffdd\035\uffdd" +
    "\036\uffdd\042\uffdd\044\uffdd\045\206\046\uffdd\047\uffdd\050" +
    "\uffdd\053\uffdd\055\uffdd\060\uffdd\001\002\000\004\035\043" +
    "\001\002\000\030\031\uffde\035\uffde\036\uffde\042\uffde\044" +
    "\uffde\046\uffde\047\uffde\050\uffde\053\uffde\055\uffde\060\uffde" +
    "\001\002\000\042\031\uffeb\035\uffeb\036\uffeb\041\uffeb\042" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\055\uffeb\060\uffeb\001\002\000" +
    "\036\010\121\011\132\012\113\013\131\014\114\015\115" +
    "\016\123\021\122\022\125\023\116\024\134\025\130\026" +
    "\133\031\213\001\002\000\030\031\uffd9\035\uffd9\036\uffd9" +
    "\042\uffd9\044\uffd9\046\uffd9\047\uffd9\050\uffd9\053\uffd9\055" +
    "\uffd9\060\uffd9\001\002\000\030\031\uffda\035\uffda\036\uffda" +
    "\042\uffda\044\uffda\046\uffda\047\uffda\050\uffda\053\uffda\055" +
    "\uffda\060\uffda\001\002\000\036\010\121\011\132\012\113" +
    "\013\131\014\114\015\115\016\123\021\122\022\125\023" +
    "\116\024\134\025\130\026\133\035\043\001\002\000\030" +
    "\031\uffdb\035\uffdb\036\uffdb\042\uffdb\044\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\053\uffdb\055\uffdb\060\uffdb\001\002\000\006" +
    "\031\221\032\220\001\002\000\010\031\ufff6\032\ufff6\037" +
    "\032\001\002\000\004\060\006\001\002\000\040\031\ufffa" +
    "\035\ufffa\036\ufffa\041\ufffa\042\ufffa\044\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa" +
    "\060\ufffa\001\002\000\006\031\ufff7\032\ufff7\001\002\000" +
    "\004\060\006\001\002\000\030\031\054\035\043\036\uffe8" +
    "\042\063\044\050\046\060\047\066\050\055\053\056\055" +
    "\064\060\006\001\002\000\030\031\uffd7\035\uffd7\036\uffd7" +
    "\042\uffd7\044\uffd7\046\uffd7\047\uffd7\050\uffd7\053\uffd7\055" +
    "\uffd7\060\uffd7\001\002\000\024\004\uffd4\005\uffd4\011\uffd4" +
    "\017\uffd4\033\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\001" +
    "\002\000\024\004\uffd3\005\uffd3\011\uffd3\017\uffd3\033\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\060\uffd3\001\002\000\024\004" +
    "\uffd2\005\uffd2\011\uffd2\017\uffd2\033\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\001\002\000\024\004\033\005\107\011" +
    "\103\017\077\033\101\055\064\056\100\057\102\060\006" +
    "\001\002\000\036\010\121\011\132\012\113\013\131\014" +
    "\114\015\115\016\123\021\122\022\125\023\116\024\134" +
    "\025\130\026\133\031\233\001\002\000\030\031\uffe1\035" +
    "\uffe1\036\uffe1\042\uffe1\044\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\053\uffe1\055\uffe1\060\uffe1\001\002\000\030\031\uffe0\035" +
    "\uffe0\036\uffe0\042\uffe0\044\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\053\uffe0\055\uffe0\060\uffe0\001\002\000\004\060\006\001" +
    "\002\000\006\032\uffed\034\uffed\001\002\000\006\032\uffee" +
    "\034\uffee\001\002\000\014\036\ufff2\041\ufff2\051\ufff2\052" +
    "\ufff2\054\ufff2\001\002\000\040\031\ufff9\035\ufff9\036\ufff9" +
    "\041\ufff9\042\ufff9\044\ufff9\046\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\060\ufff9\001\002" +
    "\000\004\060\006\001\002\000\014\036\ufff3\041\ufff3\051" +
    "\ufff3\052\ufff3\054\ufff3\001\002\000\004\033\031\001\002" +
    "\000\004\002\000\001\002\000\004\033\247\001\002\000" +
    "\012\034\250\041\015\051\022\052\014\001\002\000\004" +
    "\035\043\001\002\000\006\032\041\034\252\001\002\000" +
    "\004\035\043\001\002\000\014\036\ufff0\041\ufff0\051\ufff0" +
    "\052\ufff0\054\ufff0\001\002\000\014\036\ufff1\041\ufff1\051" +
    "\ufff1\052\ufff1\054\ufff1\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\026\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\010\001\001\000\014\003\017\004\022\005" +
    "\020\014\016\020\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\245\001\001\000\010\007\215\017\026\026\027\001\001" +
    "\000\002\001\001\000\006\014\241\020\242\001\001\000" +
    "\002\001\001\000\010\005\023\014\024\020\012\001\001" +
    "\000\006\014\241\020\242\001\001\000\010\007\025\017" +
    "\026\026\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\037\014\036\001\001\000" +
    "\004\037\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\237\001\001\000\004\026" +
    "\236\001\001\000\002\001\001\000\004\014\234\001\001" +
    "\000\004\024\043\001\001\000\004\044\044\001\001\000" +
    "\002\001\001\000\026\004\051\013\064\014\052\015\045" +
    "\016\046\022\066\023\050\024\060\025\056\026\061\001" +
    "\001\000\002\001\001\000\004\035\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\223\014\222\015" +
    "\045\016\046\022\066\023\050\024\060\026\061\001\001" +
    "\000\010\007\215\017\026\026\216\001\001\000\002\001" +
    "\001\000\026\015\072\016\073\021\213\022\107\026\061" +
    "\027\110\036\105\037\104\040\103\041\074\001\001\000" +
    "\026\015\072\016\073\021\210\022\107\026\061\027\110" +
    "\036\105\037\104\040\103\041\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\015\045\016" +
    "\046\022\066\023\142\024\060\026\061\001\001\000\004" +
    "\026\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\015\072\016\073\021\075\022\107" +
    "\026\061\027\110\036\105\037\104\040\103\041\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\030\116\031\125\032\123\033\117\034\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\015\072" +
    "\016\073\021\135\022\107\026\061\027\110\036\105\037" +
    "\104\040\103\041\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\015\072" +
    "\016\073\021\111\022\107\026\061\027\110\036\105\037" +
    "\104\040\103\041\074\001\001\000\014\030\116\031\125" +
    "\032\123\033\117\034\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\015\072\016\073\021\134\022\107\026\061\027\110\036" +
    "\105\037\104\040\103\041\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\030\116" +
    "\031\125\032\123\033\117\034\126\001\001\000\014\030" +
    "\116\031\125\032\123\033\117\034\126\001\001\000\002" +
    "\001\001\000\026\015\072\016\073\021\140\022\107\026" +
    "\061\027\110\036\105\037\104\040\103\041\074\001\001" +
    "\000\016\024\141\030\116\031\125\032\123\033\117\034" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\155\010\154\015\072\016\073\021\153\022" +
    "\107\026\061\027\110\036\105\037\104\040\103\041\074" +
    "\042\156\001\001\000\002\001\001\000\014\030\116\031" +
    "\125\032\123\033\117\034\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\161\015" +
    "\072\016\073\021\153\022\107\026\061\027\110\036\105" +
    "\037\104\040\103\041\074\042\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\155\010\164\015\072" +
    "\016\073\021\153\022\107\026\061\027\110\036\105\037" +
    "\104\040\103\041\074\042\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\011\175\015\072\016\073\021\173\022\107\026\061" +
    "\027\110\036\105\037\104\040\103\041\074\001\001\000" +
    "\026\015\072\016\073\021\171\022\107\026\061\027\110" +
    "\036\105\037\104\040\103\041\074\001\001\000\014\030" +
    "\116\031\125\032\123\033\117\034\126\001\001\000\002" +
    "\001\001\000\014\030\116\031\125\032\123\033\117\034" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\015\072\016\073\021\200\022\107\026\061\027\110\036" +
    "\105\037\104\040\103\041\074\001\001\000\002\001\001" +
    "\000\014\030\116\031\125\032\123\033\117\034\126\001" +
    "\001\000\026\015\072\016\073\021\202\022\107\026\061" +
    "\027\110\036\105\037\104\040\103\041\074\001\001\000" +
    "\014\030\116\031\125\032\123\033\117\034\126\001\001" +
    "\000\004\024\204\001\001\000\002\001\001\000\004\024" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\030\116\031\125\032\123\033\117\034\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\024\214\030\116" +
    "\031\125\032\123\033\117\034\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\221" +
    "\026\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\025\017\026\026\216\001\001\000\016\015\045" +
    "\016\046\022\066\023\142\024\060\026\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\015\072\016\073\021\231\022\107\026" +
    "\061\027\110\036\105\037\104\040\103\041\074\001\001" +
    "\000\014\030\116\031\125\032\123\033\117\034\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\250\014\036\001\001\000\004\024\253" +
    "\001\001\000\002\001\001\000\004\024\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
	
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	/*atributos globales*/
	TablaDeSimbolos tds = new TablaDeSimbolos();
	Type tipoVar;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // string_literal ::= STRING_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_literal",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // float_literal ::= FLOAT_LITERAL 
            {
              FloatLiteral RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float_literal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bool_literal ::= FALSE 
            {
              BoolLiteral RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteral(f) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // bool_literal ::= TRUE 
            {
              BoolLiteral RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteral(t) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // int_literal ::= INT_LITERAL 
            {
              IntLiteral RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(n) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_literal",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // id ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal ::= bool_literal 
            {
              Literal RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolLiteral bl = (BoolLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = bl ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= float_literal 
            {
              Literal RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FloatLiteral fl = (FloatLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fl ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= int_literal 
            {
              Literal RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntLiteral il = (IntLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = il ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cond_op ::= OR 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.OR  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cond_op ::= AND 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.AND  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // eq_op ::= NOTEQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.NOTEQ  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eq_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // eq_op ::= EQEQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.EQEQ  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eq_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // rel_op ::= GTEQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.GTEQ  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // rel_op ::= LTEQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.LTEQ  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // rel_op ::= GT 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.GT  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // rel_op ::= LT 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.LT  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arith_op ::= DIVIDE 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.DIVIDE  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arith_op ::= MOD 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.MOD  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arith_op ::= TIMES 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.TIMES  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // arith_op ::= MINUS 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.MINUS  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arith_op ::= PLUS 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.PLUS  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bin_op ::= cond_op 
            {
              BinOpType RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType co = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = co  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bin_op ::= eq_op 
            {
              BinOpType RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType eo = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = eo  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bin_op ::= rel_op 
            {
              BinOpType RESULT =null;
		int roleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int roright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType ro = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ro ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bin_op ::= arith_op 
            {
              BinOpType RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType ao = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ao  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unary_op ::= MINUS 
            {
              UnaryOpType RESULT =null;
		 RESULT = UnaryOpType.MINUS  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unary_op ::= NOT 
            {
              UnaryOpType RESULT =null;
		 RESULT = UnaryOpType.NOT  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // externinvk_arg ::= string_literal 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // externinvk_arg ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // externinvk_arg_sequence ::= externinvk_arg_sequence COMMA externinvk_arg 
            {
              LinkedList<Object> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> es = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 es.add(e); 
																					RESULT = es  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg_sequence",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // externinvk_arg_sequence ::= externinvk_arg 
            {
              LinkedList<Object> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Object> l = new LinkedList<Object>() ;
													l.add(e);
													RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg_sequence",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= unary_op expr 
            {
              Expression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UnaryOpType op = (UnaryOpType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOpExpr(op,e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr bin_op expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinOpType op = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e,op,e2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =l ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= extern 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Extern e = (Extern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= method_call 
            {
              Expression RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall mc = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = mc ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= location 
            {
              Expression RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =loc ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_sequence ::= expr_sequence COMMA expr 
            {
              LinkedList<Expression> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expression> es = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 es.add(e); 
													RESULT = es  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_sequence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_sequence ::= expr 
            {
              LinkedList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Expression> l = new LinkedList<Expression>() ;
								l.add(e);
								RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_sequence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // location ::= id LBRACKET expr RBRACKET 
            {
              Location RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  Descriptor d = tds.search(i);
						if (d!=null)
							if (d.getClase().equals("descriptorArreglo"))
								RESULT = new VarLocation(i,d); 
							else
								System.out.println("ERROR: Variable no declarada");				
						else
							System.out.println("ERROR: Los tipos no concuerdan"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // location ::= id 
            {
              Location RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Descriptor d = tds.search(i);
						if (d!=null)
							if (d.getClase().equals("descriptorSimple"))
								RESULT = new VarLocation(i,d);
							else
								System.out.println("ERROR: Variable no declarada");				
						else
							System.out.println("ERROR: Los tipos no concuerdan"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // extern ::= EXTERNINVK LPAREN string_literal COMMA VOID COMMA externinvk_arg_sequence RPAREN 
            {
              Extern RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Object> l = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Extern(s,null,l)  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extern",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // extern ::= EXTERNINVK LPAREN string_literal COMMA type COMMA externinvk_arg_sequence RPAREN 
            {
              Extern RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Object> l = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Extern(s,t,l)  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extern",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // extern ::= EXTERNINVK LPAREN string_literal COMMA VOID RPAREN 
            {
              Extern RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Extern(s,null,null)  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extern",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // extern ::= EXTERNINVK LPAREN string_literal COMMA type RPAREN 
            {
              Extern RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Extern(s,t,null)  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extern",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // method_call ::= id LPAREN expr_sequence RPAREN 
            {
              MethodCall RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expression> l = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Descriptor d = tds.search(i);
										if (d!=null)
											if (d.getClase().equals("descriptorFuncion"))
												RESULT = new MethodCall(i,d.getTipo(),l) ;
											else
												System.out.println("ERROR: funcion no declarada");				
										else
											System.out.println("ERROR: Los tipos no concuerdan");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // method_call ::= id LPAREN RPAREN 
            {
              MethodCall RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Descriptor d = tds.search(i);
										if (d!=null)
											if (d.getClase().equals("descriptorFuncion"))
												RESULT = new MethodCall(i,d.getTipo(),null) ;
											else
												System.out.println("ERROR: funcion no declarada");				
										else
											System.out.println("ERROR: Los tipos no concuerdan");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assign_op ::= MINUSEQ 
            {
              AssignOpType RESULT =null;
		 RESULT = AssignOpType.DECREMENT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assign_op ::= PLUSEQ 
            {
              AssignOpType RESULT =null;
		 RESULT = AssignOpType.INCREMENT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assign_op ::= EQ 
            {
              AssignOpType RESULT =null;
		 RESULT = AssignOpType.ASSIGN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= block 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= SEMI 
            {
              Statement RESULT =null;
		 RESULT = new SkipStmt() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= CONTINUE SEMI 
            {
              Statement RESULT =null;
		 RESULT = new ContinueStmt() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= BREAK SEMI 
            {
              Statement RESULT =null;
		 RESULT = new BreakStmt() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= RETURN SEMI 
            {
              Statement RESULT =null;
		 RESULT = new ReturnStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= RETURN expr SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStmt(e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= WHILE expr block 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileStmt(b,e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= FOR id EQ expr COMMA expr block 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForStmt(i,e,c,b) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= IF LPAREN expr RPAREN block 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStmt(e,b) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= IF LPAREN expr RPAREN block ELSE block 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStmt(e,b1,b2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= extern SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Extern e = (Extern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExternStmt(e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= method_call SEMI 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodCallStmt(m) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= location assign_op expr SEMI 
            {
              Statement RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssignOpType aop = (AssignOpType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignStmt(loc,aop,e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_decl ::= statement_decl statement 
            {
              LinkedList<Statement> RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Statement> sd = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  sd.add(s);
															RESULT = sd ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement_decl ::= statement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Statement> l = new LinkedList<Statement>() ;
									l.add(s);
									RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		tipoVar = Type.BOOL; RESULT = Type.BOOL ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= FLOAT 
            {
              Type RESULT =null;
		tipoVar = Type.FLOAT; RESULT = Type.FLOAT ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= INT 
            {
              Type RESULT =null;
		tipoVar = Type.INT;  RESULT = Type.INT ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // block_content ::= 
            {
              Block RESULT =null;
		 RESULT = new Block(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_content",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // block_content ::= field_decl statement_decl 
            {
              Block RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Statement> sd = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Block(sd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_content",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // block_content ::= field_decl 
            {
              Block RESULT =null;
		 RESULT = new Block(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_content",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // block_content ::= statement_decl 
            {
              Block RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Statement> sd = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Block(sd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_content",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // block ::= LKEY NT$1 block_content RKEY 
            {
              Block RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Block) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		tds.pop(); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Block RESULT =null;
tds.push(new Ambiente()) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parameters ::= parameters COMMA type id 
            {
              LinkedList<DescriptorSimple> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<DescriptorSimple> p = (LinkedList<DescriptorSimple>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  p.add(new DescriptorSimple(i,t));
											RESULT = p ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parameters ::= type id 
            {
              LinkedList<DescriptorSimple> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<DescriptorSimple> l = new LinkedList<DescriptorSimple>() ;
								l.add(new DescriptorSimple(i,t));
								RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method ::= type id LPAREN parameters RPAREN block 
            {
              VarLocation RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<DescriptorSimple> p = (LinkedList<DescriptorSimple>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Descriptor d = tds.search(i);
						if (d==null)
								RESULT = new VarLocation(i,b,new DescriptorFuncion(i,t,p)) ;
							else
								System.out.println("ERROR: Variable redeclarada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method ::= VOID id LPAREN parameters RPAREN block 
            {
              VarLocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<DescriptorSimple> p = (LinkedList<DescriptorSimple>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Descriptor d = tds.search(i);
						if (d==null)
								RESULT = new VarLocation(i,b,new DescriptorFuncion(i,null,p)) ;
							else
								System.out.println("ERROR: Variable redeclarada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method ::= VOID id LPAREN RPAREN block 
            {
              VarLocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Descriptor d = tds.search(i);
						if (d==null)
								RESULT = new VarLocation(i,b,new DescriptorFuncion(i,null,null)) ;
							else
								System.out.println("ERROR: Variable redeclarada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method ::= type id LPAREN RPAREN block 
            {
              VarLocation RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Descriptor d = tds.search(i);
						if (d==null)
								RESULT = new VarLocation(i,b,new DescriptorFuncion(i,t,null)) ;
							else
								System.out.println("ERROR: Variable redeclarada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_decl ::= method_decl method 
            {
              Object RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarLocation m = (VarLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tds.top().put(m.getId(),m.getDesc()) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_decl ::= method 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarLocation m = (VarLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tds.top().put(m.getId(),m.getDesc()) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // location_decl ::= id LBRACKET int_literal RBRACKET 
            {
              VarLocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IntLiteral il = (IntLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  Descriptor d = tds.search(i);
						if (d==null)
								RESULT = new VarLocation(i,new DescriptorArreglo(i,tipoVar,il.getValue())) ;
							else
								System.out.println("ERROR: Variable redeclarada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // location_decl ::= id 
            {
              VarLocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Descriptor d = tds.search(i);
						if (d==null)
								RESULT = new VarLocation(i,new DescriptorSimple(i,tipoVar)) ;
							else
								System.out.println("ERROR: Variable redeclarada"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // id_sequence ::= id_sequence COMMA location_decl 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarLocation l = (VarLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tds.top().put(l.getId(),l.getDesc()) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_sequence",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // id_sequence ::= location_decl 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarLocation l = (VarLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tds.top().put(l.getId(),l.getDesc()) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_sequence",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_decl ::= field_decl type id_sequence SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_decl ::= type id_sequence SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= field_decl method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= field_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= CLASS id LKEY RKEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= CLASS id LKEY NT$0 decl RKEY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		tds.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
 tds.push(new Ambiente());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

