
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 19 15:09:53 ART 2014
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import ir.ast.*;
import error.*;
import ir.*;
import ir.semcheck.*;
import tabladesimbolos.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 19 15:09:53 ART 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\043\002\000\002\002\010\000\002\002" +
    "\004\000\002\002\006\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\004\005\000\002\004\006\000" +
    "\002\007\003\000\002\007\005\000\002\017\003\000\002" +
    "\017\006\000\002\005\003\000\002\005\004\000\002\020" +
    "\007\000\002\020\007\000\002\044\002\000\002\020\011" +
    "\000\002\045\002\000\002\020\011\000\002\012\004\000" +
    "\002\012\006\000\002\046\002\000\002\024\006\000\002" +
    "\025\003\000\002\025\003\000\002\025\004\000\002\025" +
    "\002\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\013\003\000\002\013\004\000\002\023\006\000" +
    "\002\023\004\000\002\023\004\000\002\023\011\000\002" +
    "\023\007\000\002\023\011\000\002\023\005\000\002\023" +
    "\005\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\003\000\002\023\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\015\005\000\002" +
    "\015\006\000\002\022\010\000\002\022\010\000\002\022" +
    "\012\000\002\022\012\000\002\016\003\000\002\016\006" +
    "\000\002\011\003\000\002\011\005\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\004\000\002\021\004\000\002\021\005\000\002\010" +
    "\003\000\002\010\005\000\002\006\003\000\002\006\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\026" +
    "\003\000\002\037\003\000\002\040\003\000\002\040\003" +
    "\000\002\041\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\044\005\001\002\000\004\002\266\001" +
    "\002\000\004\061\006\001\002\000\060\010\uff97\011\uff97" +
    "\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\020\uff97\021" +
    "\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97" +
    "\030\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\040" +
    "\uff97\041\uff97\001\002\000\004\036\010\001\002\000\014" +
    "\037\012\042\001\052\001\053\001\055\001\001\002\000" +
    "\012\042\015\052\022\053\014\055\016\001\002\000\004" +
    "\002\ufffe\001\002\000\014\037\ufff4\042\ufff4\052\ufff4\053" +
    "\ufff4\055\ufff4\001\002\000\010\033\uffe4\035\uffe4\061\uffe4" +
    "\001\002\000\010\033\uffe2\035\uffe2\061\uffe2\001\002\000" +
    "\004\061\006\001\002\000\004\061\006\001\002\000\004" +
    "\037\255\001\002\000\014\037\ufffc\042\015\052\022\053" +
    "\014\055\016\001\002\000\010\033\uffe3\035\uffe3\061\uffe3" +
    "\001\002\000\014\037\ufffd\042\015\052\022\053\014\055" +
    "\016\001\002\000\014\037\ufffb\042\015\052\022\053\014" +
    "\055\016\001\002\000\004\061\006\001\002\000\006\032" +
    "\251\033\232\001\002\000\006\032\ufff8\033\ufff8\001\002" +
    "\000\012\032\ufff6\033\ufff6\034\031\040\032\001\002\000" +
    "\012\035\036\042\015\052\022\053\014\001\002\000\004" +
    "\004\033\001\002\000\046\010\uff96\011\uff96\012\uff96\013" +
    "\uff96\014\uff96\015\uff96\016\uff96\021\uff96\022\uff96\023\uff96" +
    "\024\uff96\025\uff96\026\uff96\032\uff96\033\uff96\035\uff96\036" +
    "\uff96\041\uff96\001\002\000\004\041\035\001\002\000\006" +
    "\032\ufff5\033\ufff5\001\002\000\004\036\044\001\002\000" +
    "\004\061\006\001\002\000\006\033\041\035\uffee\001\002" +
    "\000\010\042\015\052\022\053\014\001\002\000\004\035" +
    "\043\001\002\000\004\036\044\001\002\000\036\032\uffea" +
    "\036\uffea\037\uffea\042\uffea\043\uffea\045\uffea\047\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\uffea\054\uffea\056\uffea\061\uffea" +
    "\001\002\000\014\037\uffed\042\uffed\052\uffed\053\uffed\055" +
    "\uffed\001\002\000\036\032\055\036\044\037\uffe5\042\015" +
    "\043\064\045\051\047\060\050\067\051\056\052\022\053" +
    "\014\054\057\056\065\061\006\001\002\000\004\032\244" +
    "\001\002\000\010\020\236\027\237\030\240\001\002\000" +
    "\004\032\235\001\002\000\030\032\uffe1\036\uffe1\037\uffe1" +
    "\043\uffe1\045\uffe1\047\uffe1\050\uffe1\051\uffe1\054\uffe1\056" +
    "\uffe1\061\uffe1\001\002\000\004\061\006\001\002\000\036" +
    "\032\055\036\044\037\uffe7\042\015\043\064\045\051\047" +
    "\060\050\067\051\056\052\022\053\014\054\057\056\065" +
    "\061\006\001\002\000\030\032\uffd4\036\uffd4\037\uffd4\043" +
    "\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4\054\uffd4\056\uffd4" +
    "\061\uffd4\001\002\000\024\004\033\005\110\011\104\017" +
    "\100\034\102\056\065\057\101\060\103\061\006\001\002" +
    "\000\026\004\033\005\110\011\104\017\100\032\222\034" +
    "\102\056\065\057\101\060\103\061\006\001\002\000\004" +
    "\034\213\001\002\000\004\037\212\001\002\000\030\032" +
    "\uffd3\036\uffd3\037\uffd3\043\uffd3\045\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\054\uffd3\056\uffd3\061\uffd3\001\002\000\060\010" +
    "\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\032\uffc9\033\uffc9\034\200\035\uffc9" +
    "\036\uffc9\040\201\041\uffc9\001\002\000\004\032\177\001" +
    "\002\000\004\034\154\001\002\000\030\032\055\036\044" +
    "\037\uffe8\043\064\045\051\047\060\050\067\051\056\054" +
    "\057\056\065\061\006\001\002\000\004\061\006\001\002" +
    "\000\004\032\071\001\002\000\030\032\uffdd\036\uffdd\037" +
    "\uffdd\043\uffdd\045\uffdd\047\uffdd\050\uffdd\051\uffdd\054\uffdd" +
    "\056\uffdd\061\uffdd\001\002\000\004\020\073\001\002\000" +
    "\024\004\033\005\110\011\104\017\100\034\102\056\065" +
    "\057\101\060\103\061\006\001\002\000\046\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\032\uffc4\033" +
    "\uffc4\035\uffc4\036\uffc4\041\uffc4\001\002\000\046\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\032\uffc5" +
    "\033\uffc5\035\uffc5\036\uffc5\041\uffc5\001\002\000\046\010" +
    "\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99" +
    "\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\032" +
    "\uff99\033\uff99\035\uff99\036\uff99\041\uff99\001\002\000\036" +
    "\010\122\011\114\012\124\013\116\014\120\015\113\016" +
    "\127\021\121\022\123\023\125\024\115\025\126\026\117" +
    "\033\150\001\002\000\024\004\033\005\110\011\104\017" +
    "\100\034\102\056\065\057\101\060\103\061\006\001\002" +
    "\000\046\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015" +
    "\uff95\016\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95" +
    "\026\uff95\032\uff95\033\uff95\035\uff95\036\uff95\041\uff95\001" +
    "\002\000\024\004\033\005\110\011\104\017\100\034\102" +
    "\056\065\057\101\060\103\061\006\001\002\000\046\010" +
    "\uff94\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94" +
    "\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\032" +
    "\uff94\033\uff94\035\uff94\036\uff94\041\uff94\001\002\000\024" +
    "\004\033\005\110\011\104\017\100\034\102\056\065\057" +
    "\101\060\103\061\006\001\002\000\046\010\uff98\011\uff98" +
    "\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\021\uff98\022" +
    "\uff98\023\uff98\024\uff98\025\uff98\026\uff98\032\uff98\033\uff98" +
    "\035\uff98\036\uff98\041\uff98\001\002\000\046\010\uff9a\011" +
    "\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\032\uff9a\033" +
    "\uff9a\035\uff9a\036\uff9a\041\uff9a\001\002\000\046\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\032\uffc2" +
    "\033\uffc2\035\uffc2\036\uffc2\041\uffc2\001\002\000\046\010" +
    "\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93" +
    "\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93\032" +
    "\uff93\033\uff93\035\uff93\036\uff93\041\uff93\001\002\000\046" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\032\uffc3\033\uffc3\035\uffc3\036\uffc3\041\uffc3\001\002\000" +
    "\046\010\uffb4\011\uffb4\012\124\013\116\014\120\015\uffb4" +
    "\016\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\032\uffb4\033\uffb4\035\uffb4\036\uffb4\041\uffb4\001\002" +
    "\000\024\004\033\005\110\011\104\017\100\034\102\056" +
    "\065\057\101\060\103\061\006\001\002\000\024\004\033" +
    "\005\110\011\104\017\100\034\102\056\065\057\101\060" +
    "\103\061\006\001\002\000\024\004\033\005\110\011\104" +
    "\017\100\034\102\056\065\057\101\060\103\061\006\001" +
    "\002\000\024\004\033\005\110\011\104\017\100\034\102" +
    "\056\065\057\101\060\103\061\006\001\002\000\024\004" +
    "\033\005\110\011\104\017\100\034\102\056\065\057\101" +
    "\060\103\061\006\001\002\000\024\004\033\005\110\011" +
    "\104\017\100\034\102\056\065\057\101\060\103\061\006" +
    "\001\002\000\024\004\033\005\110\011\104\017\100\034" +
    "\102\056\065\057\101\060\103\061\006\001\002\000\024" +
    "\004\033\005\110\011\104\017\100\034\102\056\065\057" +
    "\101\060\103\061\006\001\002\000\024\004\033\005\110" +
    "\011\104\017\100\034\102\056\065\057\101\060\103\061" +
    "\006\001\002\000\024\004\033\005\110\011\104\017\100" +
    "\034\102\056\065\057\101\060\103\061\006\001\002\000" +
    "\024\004\033\005\110\011\104\017\100\034\102\056\065" +
    "\057\101\060\103\061\006\001\002\000\024\004\033\005" +
    "\110\011\104\017\100\034\102\056\065\057\101\060\103" +
    "\061\006\001\002\000\024\004\033\005\110\011\104\017" +
    "\100\034\102\056\065\057\101\060\103\061\006\001\002" +
    "\000\046\010\122\011\114\012\124\013\116\014\120\015" +
    "\113\016\uffb5\021\121\022\123\023\125\024\115\025\126" +
    "\026\117\032\uffb5\033\uffb5\035\uffb5\036\uffb5\041\uffb5\001" +
    "\002\000\032\010\122\011\114\012\124\013\116\014\120" +
    "\015\uffba\016\uffba\032\uffba\033\uffba\035\uffba\036\uffba\041" +
    "\uffba\001\002\000\032\010\122\011\114\012\124\013\116" +
    "\014\120\015\uffbc\016\uffbc\032\uffbc\033\uffbc\035\uffbc\036" +
    "\uffbc\041\uffbc\001\002\000\046\010\uffbf\011\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\016\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\032\uffbf\033\uffbf\035\uffbf" +
    "\036\uffbf\041\uffbf\001\002\000\032\010\122\011\114\012" +
    "\124\013\116\014\120\015\uffbb\016\uffbb\032\uffbb\033\uffbb" +
    "\035\uffbb\036\uffbb\041\uffbb\001\002\000\046\010\uffc1\011" +
    "\uffc1\012\124\013\116\014\120\015\uffc1\016\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\032\uffc1\033" +
    "\uffc1\035\uffc1\036\uffc1\041\uffc1\001\002\000\032\010\122" +
    "\011\114\012\124\013\116\014\120\015\uffb7\016\uffb7\032" +
    "\uffb7\033\uffb7\035\uffb7\036\uffb7\041\uffb7\001\002\000\046" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\032\uffbe\033\uffbe\035\uffbe\036\uffbe\041\uffbe\001\002\000" +
    "\032\010\122\011\114\012\124\013\116\014\120\015\uffb9" +
    "\016\uffb9\032\uffb9\033\uffb9\035\uffb9\036\uffb9\041\uffb9\001" +
    "\002\000\046\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\032\uffbd\033\uffbd\035\uffbd\036\uffbd\041\uffbd" +
    "\001\002\000\032\010\122\011\114\012\124\013\116\014" +
    "\120\015\uffb8\016\uffb8\032\uffb8\033\uffb8\035\uffb8\036\uffb8" +
    "\041\uffb8\001\002\000\046\010\uffc0\011\uffc0\012\124\013" +
    "\116\014\120\015\uffc0\016\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\032\uffc0\033\uffc0\035\uffc0\036" +
    "\uffc0\041\uffc0\001\002\000\046\010\122\011\114\012\124" +
    "\013\116\014\120\015\uffb6\016\uffb6\021\121\022\123\023" +
    "\125\024\115\025\126\026\117\032\uffb6\033\uffb6\035\uffb6" +
    "\036\uffb6\041\uffb6\001\002\000\036\010\122\011\114\012" +
    "\124\013\116\014\120\015\113\016\127\021\121\022\123" +
    "\023\125\024\115\025\126\026\117\035\146\001\002\000" +
    "\046\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\032\uffb2\033\uffb2\035\uffb2\036\uffb2\041\uffb2\001\002" +
    "\000\046\010\122\011\114\012\124\013\116\014\120\015" +
    "\113\016\127\021\121\022\123\023\125\024\115\025\126" +
    "\026\117\032\uffb3\033\uffb3\035\uffb3\036\uffb3\041\uffb3\001" +
    "\002\000\024\004\033\005\110\011\104\017\100\034\102" +
    "\056\065\057\101\060\103\061\006\001\002\000\036\010" +
    "\122\011\114\012\124\013\116\014\120\015\113\016\127" +
    "\021\121\022\123\023\125\024\115\025\126\026\117\036" +
    "\044\001\002\000\030\032\uffda\036\uffda\037\uffda\043\uffda" +
    "\045\uffda\047\uffda\050\uffda\051\uffda\054\uffda\056\uffda\061" +
    "\uffda\001\002\000\030\032\uffe0\036\uffe0\037\uffe0\043\uffe0" +
    "\045\uffe0\047\uffe0\050\uffe0\051\uffe0\054\uffe0\056\uffe0\061" +
    "\uffe0\001\002\000\004\006\156\001\002\000\004\033\157" +
    "\001\002\000\006\033\uff92\035\uff92\001\002\000\012\042" +
    "\015\052\022\053\014\055\161\001\002\000\006\033\173" +
    "\035\174\001\002\000\006\033\162\035\163\001\002\000" +
    "\026\004\033\005\110\006\156\011\104\017\100\034\102" +
    "\056\065\057\101\060\103\061\006\001\002\000\046\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\032" +
    "\uffcc\033\uffcc\035\uffcc\036\uffcc\041\uffcc\001\002\000\040" +
    "\010\122\011\114\012\124\013\116\014\120\015\113\016" +
    "\127\021\121\022\123\023\125\024\115\025\126\026\117" +
    "\033\uffaf\035\uffaf\001\002\000\006\033\170\035\171\001" +
    "\002\000\006\033\uffb1\035\uffb1\001\002\000\006\033\uffae" +
    "\035\uffae\001\002\000\026\004\033\005\110\006\156\011" +
    "\104\017\100\034\102\056\065\057\101\060\103\061\006" +
    "\001\002\000\046\010\uffca\011\uffca\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\021\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\032\uffca\033\uffca\035\uffca\036\uffca\041" +
    "\uffca\001\002\000\006\033\uffb0\035\uffb0\001\002\000\026" +
    "\004\033\005\110\006\156\011\104\017\100\034\102\056" +
    "\065\057\101\060\103\061\006\001\002\000\046\010\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\032\uffcd" +
    "\033\uffcd\035\uffcd\036\uffcd\041\uffcd\001\002\000\006\033" +
    "\170\035\176\001\002\000\046\010\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\032\uffcb\033\uffcb\035\uffcb" +
    "\036\uffcb\041\uffcb\001\002\000\030\032\uffd6\036\uffd6\037" +
    "\uffd6\043\uffd6\045\uffd6\047\uffd6\050\uffd6\051\uffd6\054\uffd6" +
    "\056\uffd6\061\uffd6\001\002\000\026\004\033\005\110\011" +
    "\104\017\100\034\102\035\205\056\065\057\101\060\103" +
    "\061\006\001\002\000\024\004\033\005\110\011\104\017" +
    "\100\034\102\056\065\057\101\060\103\061\006\001\002" +
    "\000\036\010\122\011\114\012\124\013\116\014\120\015" +
    "\113\016\127\021\121\022\123\023\125\024\115\025\126" +
    "\026\117\041\203\001\002\000\054\010\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\032\uffc8\033\uffc8\035\uffc8\036\uffc8\041\uffc8\001\002" +
    "\000\040\010\122\011\114\012\124\013\116\014\120\015" +
    "\113\016\127\021\121\022\123\023\125\024\115\025\126" +
    "\026\117\033\uffc7\035\uffc7\001\002\000\046\010\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\032\uffcf\033" +
    "\uffcf\035\uffcf\036\uffcf\041\uffcf\001\002\000\006\033\207" +
    "\035\210\001\002\000\024\004\033\005\110\011\104\017" +
    "\100\034\102\056\065\057\101\060\103\061\006\001\002" +
    "\000\046\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\032\uffce\033\uffce\035\uffce\036\uffce\041\uffce\001" +
    "\002\000\040\010\122\011\114\012\124\013\116\014\120" +
    "\015\113\016\127\021\121\022\123\023\125\024\115\025" +
    "\126\026\117\033\uffc6\035\uffc6\001\002\000\042\032\uffe9" +
    "\036\uffe9\037\uffe9\042\uffe9\043\uffe9\045\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\061\uffe9\001\002\000\024\004\033\005\110\011" +
    "\104\017\100\034\102\056\065\057\101\060\103\061\006" +
    "\001\002\000\036\010\122\011\114\012\124\013\116\014" +
    "\120\015\113\016\127\021\121\022\123\023\125\024\115" +
    "\025\126\026\117\035\215\001\002\000\004\036\044\001" +
    "\002\000\032\032\uffdb\036\uffdb\037\uffdb\043\uffdb\045\uffdb" +
    "\046\217\047\uffdb\050\uffdb\051\uffdb\054\uffdb\056\uffdb\061" +
    "\uffdb\001\002\000\004\036\044\001\002\000\030\032\uffdc" +
    "\036\uffdc\037\uffdc\043\uffdc\045\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\054\uffdc\056\uffdc\061\uffdc\001\002\000\036\010\122" +
    "\011\114\012\124\013\116\014\120\015\113\016\127\021" +
    "\121\022\123\023\125\024\115\025\126\026\117\032\223" +
    "\001\002\000\030\032\uffd7\036\uffd7\037\uffd7\043\uffd7\045" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\054\uffd7\056\uffd7\061\uffd7" +
    "\001\002\000\030\032\uffd8\036\uffd8\037\uffd8\043\uffd8\045" +
    "\uffd8\047\uffd8\050\uffd8\051\uffd8\054\uffd8\056\uffd8\061\uffd8" +
    "\001\002\000\036\010\122\011\114\012\124\013\116\014" +
    "\120\015\113\016\127\021\121\022\123\023\125\024\115" +
    "\025\126\026\117\036\044\001\002\000\030\032\uffd9\036" +
    "\uffd9\037\uffd9\043\uffd9\045\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\054\uffd9\056\uffd9\061\uffd9\001\002\000\004\061\006\001" +
    "\002\000\030\032\055\036\044\037\uffe6\043\064\045\051" +
    "\047\060\050\067\051\056\054\057\056\065\061\006\001" +
    "\002\000\010\032\ufff6\033\ufff6\040\032\001\002\000\006" +
    "\032\233\033\232\001\002\000\004\061\006\001\002\000" +
    "\040\032\ufffa\036\ufffa\037\ufffa\042\ufffa\043\ufffa\045\ufffa" +
    "\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\061\ufffa\001\002\000\006\032\ufff7\033\ufff7" +
    "\001\002\000\030\032\uffd5\036\uffd5\037\uffd5\043\uffd5\045" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\054\uffd5\056\uffd5\061\uffd5" +
    "\001\002\000\024\004\uffd2\005\uffd2\011\uffd2\017\uffd2\034" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\001\002\000\024" +
    "\004\uffd1\005\uffd1\011\uffd1\017\uffd1\034\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\061\uffd1\001\002\000\024\004\uffd0\005\uffd0" +
    "\011\uffd0\017\uffd0\034\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\001\002\000\024\004\033\005\110\011\104\017\100" +
    "\034\102\056\065\057\101\060\103\061\006\001\002\000" +
    "\036\010\122\011\114\012\124\013\116\014\120\015\113" +
    "\016\127\021\121\022\123\023\125\024\115\025\126\026" +
    "\117\032\243\001\002\000\030\032\uffdf\036\uffdf\037\uffdf" +
    "\043\uffdf\045\uffdf\047\uffdf\050\uffdf\051\uffdf\054\uffdf\056" +
    "\uffdf\061\uffdf\001\002\000\030\032\uffde\036\uffde\037\uffde" +
    "\043\uffde\045\uffde\047\uffde\050\uffde\051\uffde\054\uffde\056" +
    "\uffde\061\uffde\001\002\000\004\061\006\001\002\000\006" +
    "\033\uffeb\035\uffeb\001\002\000\006\033\uffec\035\uffec\001" +
    "\002\000\014\037\ufff2\042\ufff2\052\ufff2\053\ufff2\055\ufff2" +
    "\001\002\000\040\032\ufff9\036\ufff9\037\ufff9\042\ufff9\043" +
    "\ufff9\045\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\061\ufff9\001\002\000\004\061" +
    "\006\001\002\000\014\037\ufff3\042\ufff3\052\ufff3\053\ufff3" +
    "\055\ufff3\001\002\000\004\034\031\001\002\000\004\002" +
    "\000\001\002\000\004\034\257\001\002\000\012\035\260" +
    "\042\015\052\022\053\014\001\002\000\004\036\044\001" +
    "\002\000\006\033\041\035\ufff0\001\002\000\004\035\263" +
    "\001\002\000\004\036\044\001\002\000\014\037\uffef\042" +
    "\uffef\052\uffef\053\uffef\055\uffef\001\002\000\014\037\ufff1" +
    "\042\ufff1\052\ufff1\053\ufff1\055\ufff1\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\026\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\010\001\001\000\014\003\017\004\022\005" +
    "\020\014\016\020\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\255\001\001\000\010\007\230\017\026\026\027\001\001" +
    "\000\002\001\001\000\006\014\251\020\252\001\001\000" +
    "\002\001\001\000\010\005\023\014\024\020\012\001\001" +
    "\000\006\014\251\020\252\001\001\000\010\007\025\017" +
    "\026\026\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\037\014\036\001\001\000" +
    "\004\037\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\247\001\001\000\004\026" +
    "\246\001\001\000\004\045\041\001\001\000\004\014\244" +
    "\001\001\000\002\001\001\000\004\024\044\001\001\000" +
    "\004\046\045\001\001\000\002\001\001\000\026\004\053" +
    "\013\065\014\052\015\046\016\047\022\067\023\051\024" +
    "\061\025\060\026\062\001\001\000\002\001\001\000\004" +
    "\035\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\230\017\026\026\227\001\001\000\022\013\226" +
    "\014\225\015\046\016\047\022\067\023\051\024\061\026" +
    "\062\001\001\000\002\001\001\000\024\015\073\016\074" +
    "\021\223\022\110\026\062\036\106\037\105\040\104\041" +
    "\075\001\001\000\024\015\073\016\074\021\220\022\110" +
    "\026\062\036\106\037\105\040\104\041\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\015" +
    "\046\016\047\022\067\023\152\024\061\026\062\001\001" +
    "\000\004\026\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\015\073\016\074\021\076" +
    "\022\110\026\062\036\106\037\105\040\104\041\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\015\073\016\074\021\146\022" +
    "\110\026\062\036\106\037\105\040\104\041\075\001\001" +
    "\000\002\001\001\000\024\015\073\016\074\021\144\022" +
    "\110\026\062\036\106\037\105\040\104\041\075\001\001" +
    "\000\002\001\001\000\024\015\073\016\074\021\111\022" +
    "\110\026\062\036\106\037\105\040\104\041\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\015\073\016\074\021\143\022\110\026\062\036\106\037" +
    "\105\040\104\041\075\001\001\000\024\015\073\016\074" +
    "\021\142\022\110\026\062\036\106\037\105\040\104\041" +
    "\075\001\001\000\024\015\073\016\074\021\141\022\110" +
    "\026\062\036\106\037\105\040\104\041\075\001\001\000" +
    "\024\015\073\016\074\021\140\022\110\026\062\036\106" +
    "\037\105\040\104\041\075\001\001\000\024\015\073\016" +
    "\074\021\137\022\110\026\062\036\106\037\105\040\104" +
    "\041\075\001\001\000\024\015\073\016\074\021\136\022" +
    "\110\026\062\036\106\037\105\040\104\041\075\001\001" +
    "\000\024\015\073\016\074\021\135\022\110\026\062\036" +
    "\106\037\105\040\104\041\075\001\001\000\024\015\073" +
    "\016\074\021\134\022\110\026\062\036\106\037\105\040" +
    "\104\041\075\001\001\000\024\015\073\016\074\021\133" +
    "\022\110\026\062\036\106\037\105\040\104\041\075\001" +
    "\001\000\024\015\073\016\074\021\132\022\110\026\062" +
    "\036\106\037\105\040\104\041\075\001\001\000\024\015" +
    "\073\016\074\021\131\022\110\026\062\036\106\037\105" +
    "\040\104\041\075\001\001\000\024\015\073\016\074\021" +
    "\130\022\110\026\062\036\106\037\105\040\104\041\075" +
    "\001\001\000\024\015\073\016\074\021\127\022\110\026" +
    "\062\036\106\037\105\040\104\041\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\015" +
    "\073\016\074\021\150\022\110\026\062\036\106\037\105" +
    "\040\104\041\075\001\001\000\004\024\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\006\165" +
    "\010\164\015\073\016\074\021\163\022\110\026\062\036" +
    "\106\037\105\040\104\041\075\042\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\171\015\073\016\074" +
    "\021\163\022\110\026\062\036\106\037\105\040\104\041" +
    "\075\042\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\165\010\174\015\073\016\074\021\163\022" +
    "\110\026\062\036\106\037\105\040\104\041\075\042\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\011\205\015\073\016\074" +
    "\021\203\022\110\026\062\036\106\037\105\040\104\041" +
    "\075\001\001\000\024\015\073\016\074\021\201\022\110" +
    "\026\062\036\106\037\105\040\104\041\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\015\073\016\074\021" +
    "\210\022\110\026\062\036\106\037\105\040\104\041\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\015\073\016\074\021\213\022\110\026\062" +
    "\036\106\037\105\040\104\041\075\001\001\000\002\001" +
    "\001\000\004\024\215\001\001\000\002\001\001\000\004" +
    "\024\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\224\001\001" +
    "\000\002\001\001\000\010\007\025\017\026\026\227\001" +
    "\001\000\016\015\046\016\047\022\067\023\152\024\061" +
    "\026\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\233\026\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\015\073\016\074\021\241" +
    "\022\110\026\062\036\106\037\105\040\104\041\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\260\014\036\001\001" +
    "\000\004\024\264\001\001\000\004\044\261\001\001\000" +
    "\002\001\001\000\004\024\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
	LinkedList<Block> asts = new LinkedList<Block>();
	
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, int line, int col) {
   
        StringBuilder m = new StringBuilder("Error");
        if (line >= 0) {                
        	m.append(" in line "+(line+1));   
            if (col >= 0)
            	m.append(", column "+(col+1));
            }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, int line, int col) {
        report_error(message, line, col);
        System.exit(1);
    }

	
	public LinkedList<Block> getASTs(){
		return asts;
	}
	TablaDeSimbolos t = new TablaDeSimbolos();

	public TablaDeSimbolos getTds(){
			return t;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	/*atributos globales*/
	TablaDeSimbolos tds = new TablaDeSimbolos();
	Type tipoVar;
	LinkedList<DescriptorSimple> params;
	int OffsetParametros = 8;
	int nivel = 0;

		private void putParameters(){
		if (params!=null){
			for (DescriptorSimple d : params){
				tds.top().put(d.getNombre(),d);
			}
		}
		}

		

		

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // string_literal ::= STRING_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_literal",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // float_literal ::= FLOAT_LITERAL 
            {
              FloatLiteral RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(f,fleft,fright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("float_literal",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // bool_literal ::= FALSE 
            {
              BoolLiteral RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteral(f,fleft,fright) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // bool_literal ::= TRUE 
            {
              BoolLiteral RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteral(t,tleft,tright) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_literal",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // int_literal ::= INT_LITERAL 
            {
              IntLiteral RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(n,nleft,nright) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("int_literal",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // id ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // literal ::= bool_literal 
            {
              Literal RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolLiteral bl = (BoolLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = bl ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // literal ::= float_literal 
            {
              Literal RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FloatLiteral fl = (FloatLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fl ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // literal ::= int_literal 
            {
              Literal RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntLiteral il = (IntLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = il ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cond_op ::= OR 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.OR  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cond_op ::= AND 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.AND  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // eq_op ::= NOTEQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.NOTEQ  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eq_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // eq_op ::= EQEQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.EQEQ  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eq_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // rel_op ::= GTEQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.GTEQ  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // rel_op ::= LTEQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.LTEQ  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // rel_op ::= GT 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.GT  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // rel_op ::= LT 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.LT  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // arith_op ::= DIVIDE 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.DIVIDE  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arith_op ::= MOD 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.MOD  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arith_op ::= TIMES 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.TIMES  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arith_op ::= MINUS 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.MINUS  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arith_op ::= PLUS 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.PLUS  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // bin_op ::= cond_op 
            {
              BinOpType RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType co = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = co  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bin_op ::= eq_op 
            {
              BinOpType RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType eo = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = eo  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bin_op ::= rel_op 
            {
              BinOpType RESULT =null;
		int roleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int roright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType ro = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ro ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bin_op ::= arith_op 
            {
              BinOpType RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType ao = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ao  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unary_op ::= MINUS 
            {
              UnaryOpType RESULT =null;
		 RESULT = UnaryOpType.MINUS  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unary_op ::= NOT 
            {
              UnaryOpType RESULT =null;
		 RESULT = UnaryOpType.NOT  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // externinvk_arg ::= string_literal 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // externinvk_arg ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // externinvk_arg_sequence ::= externinvk_arg_sequence COMMA externinvk_arg 
            {
              LinkedList<Object> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> es = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 es.add(e); 
																					RESULT = es  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg_sequence",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // externinvk_arg_sequence ::= externinvk_arg 
            {
              LinkedList<Object> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Object> l = new LinkedList<Object>() ;
													l.add(e);
													RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg_sequence",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOpExpr(UnaryOpType.NOT,e,eleft,eright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOpExpr(UnaryOpType.MINUS,e,eleft,eright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= expr OR expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e,BinOpType.OR,e2,eleft,eright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr AND expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e,BinOpType.AND,e2,eleft,eright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr NOTEQ expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e,BinOpType.NOTEQ,e2,eleft,eright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr EQEQ expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e,BinOpType.EQEQ,e2,eleft,eright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr GTEQ expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e,BinOpType.GTEQ,e2,eleft,eright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr LTEQ expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e,BinOpType.LTEQ,e2,eleft,eright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr GT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e,BinOpType.GT,e2,eleft,eright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr LT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e,BinOpType.LT,e2,eleft,eright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr DIVIDE expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e,BinOpType.DIVIDE,e2,eleft,eright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr MOD expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e,BinOpType.MOD,e2,eleft,eright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr TIMES expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e,BinOpType.TIMES,e2,eleft,eright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e,BinOpType.MINUS,e2,eleft,eright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e,BinOpType.PLUS,e2,eleft,eright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =l ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= extern 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Extern e = (Extern)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= method_call 
            {
              Expression RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall mc = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = mc ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= location 
            {
              Expression RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =loc ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_sequence ::= expr_sequence COMMA expr 
            {
              LinkedList<Expression> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expression> es = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 es.add(e); 
													RESULT = es  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_sequence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_sequence ::= expr 
            {
              LinkedList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Expression> l = new LinkedList<Expression>() ;
								l.add(e);
								RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_sequence",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // location ::= id LBRACKET expr RBRACKET 
            {
              Location RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  Descriptor d = tds.search(i);
						if (d!=null){
							if (d.getClase().equals("descriptorArreglo")){
								
									RESULT = new VarLocation(i,d,ileft,iright,false,false);
								
							}else{
								parser.report_fatal_error("Los tipos no concuerdan",ileft,iright);}			
						}else{
							parser.report_fatal_error("Variable no declarada",ileft,iright);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // location ::= id 
            {
              Location RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  Descriptor d = tds.search(i);
						if (d!=null){
							if (d.getClase().equals("descriptorSimple")){
								
									RESULT = new VarLocation(i,d,ileft,iright,false,false);
								
							}else{
								parser.report_fatal_error("Los tipos no concuerdan",ileft,iright);}				
						}else{
							parser.report_fatal_error("Variable no declarada",ileft,iright);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // extern ::= EXTERNINVK LPAREN string_literal COMMA VOID COMMA externinvk_arg_sequence RPAREN 
            {
              Extern RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Object> l = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Extern(s,Type.VOID,l,sleft,sright)  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extern",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // extern ::= EXTERNINVK LPAREN string_literal COMMA type COMMA externinvk_arg_sequence RPAREN 
            {
              Extern RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Object> l = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Extern(s,t,l,sleft,sright)  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extern",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // extern ::= EXTERNINVK LPAREN string_literal COMMA VOID RPAREN 
            {
              Extern RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Extern(s,Type.VOID,null,sleft,sright)  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extern",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // extern ::= EXTERNINVK LPAREN string_literal COMMA type RPAREN 
            {
              Extern RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Extern(s,t,null,sleft,sright)  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extern",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // method_call ::= id LPAREN expr_sequence RPAREN 
            {
              MethodCall RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expression> l = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Descriptor d = tds.search(i);
										if (d!=null)
											if (d.getClase().equals("descriptorFuncion")){
												DescriptorFuncion df = (DescriptorFuncion) d;
												if (df.getParametros() != null){
													if (df.getParametros().size()==l.size())
														RESULT = new MethodCall(i,d.getTipo(),l,ileft,iright) ;
													else
														parser.report_fatal_error("Incorrecta cantidad de parametros",ileft,iright);
												}
											}
											else
												parser.report_fatal_error("Funcion no declarada",ileft,iright);			
										else
											parser.report_fatal_error("Los tipos no concuerdan",ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // method_call ::= id LPAREN RPAREN 
            {
              MethodCall RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Descriptor d = tds.search(i);
										if (d!=null)
											if (d.getClase().equals("descriptorFuncion")){
												DescriptorFuncion df = (DescriptorFuncion) d;
												if (df.getParametros() != null){
													if (df.getParametros().size()==0)
														RESULT = new MethodCall(i,d.getTipo(),new LinkedList<Expression>(),ileft,iright) ;
													else
														parser.report_fatal_error("Incorrecta cantidad de parametros",ileft,iright);
												}

											}					
											else
												parser.report_fatal_error("Funcion no declarada",ileft,iright);		
										else
											parser.report_fatal_error("Los tipos no concuerdan",ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assign_op ::= MINUSEQ 
            {
              AssignOpType RESULT =null;
		 RESULT = AssignOpType.DECREMENT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assign_op ::= PLUSEQ 
            {
              AssignOpType RESULT =null;
		 RESULT = AssignOpType.INCREMENT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assign_op ::= EQ 
            {
              AssignOpType RESULT =null;
		 RESULT = AssignOpType.ASSIGN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= block 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= SEMI 
            {
              Statement RESULT =null;
		 RESULT = new SkipStmt() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= CONTINUE SEMI 
            {
              Statement RESULT =null;
		 RESULT = new ContinueStmt() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= BREAK SEMI 
            {
              Statement RESULT =null;
		 RESULT = new BreakStmt() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= RETURN SEMI 
            {
              Statement RESULT =null;
		 RESULT = new ReturnStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= RETURN expr SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStmt(e) 	; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= WHILE expr block 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileStmt(b,e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= FOR id EQ expr COMMA expr block 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Descriptor d = tds.search(i);
														if(d != null)
															if(d.getClase().equals("descriptorSimple")){ 
																if(d.getTipo() == Type.INT)
																	RESULT = new ForStmt(d,i,e,c,b); }
															else
																parser.report_fatal_error("Los tipos no concuerdan",ileft,iright);
														else
															parser.report_fatal_error("Variable no declarada",ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= IF LPAREN expr RPAREN block 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStmt(e,b) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= IF LPAREN expr RPAREN block ELSE block 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStmt(e,b1,b2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= extern SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Extern e = (Extern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExternStmt(e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= method_call SEMI 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodCallStmt(m) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= location assign_op expr SEMI 
            {
              Statement RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssignOpType aop = (AssignOpType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 VarLocation vl = (VarLocation) loc;
   															vl.getDesc().setValor(e);
   															RESULT = new AssignStmt(vl,aop,e,locleft,locright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement_decl ::= statement_decl statement 
            {
              LinkedList<Statement> RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Statement> sd = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  sd.add(s);
															RESULT = sd ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement_decl ::= statement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Statement> l = new LinkedList<Statement>() ;
									l.add(s);
									RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_decl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		tipoVar = Type.BOOL; RESULT = Type.BOOL ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= FLOAT 
            {
              Type RESULT =null;
		tipoVar = Type.FLOAT; RESULT = Type.FLOAT ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= INT 
            {
              Type RESULT =null;
		tipoVar = Type.INT;  RESULT = Type.INT ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // block_content ::= 
            {
              Block RESULT =null;
		 RESULT = new Block(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_content",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // block_content ::= field_decl statement_decl 
            {
              Block RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Statement> sd = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Block(sd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_content",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // block_content ::= field_decl 
            {
              Block RESULT =null;
		 RESULT = new Block(null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_content",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // block_content ::= statement_decl 
            {
              Block RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Statement> sd = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Block(sd);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_content",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // block ::= LKEY NT$3 block_content RKEY 
            {
              Block RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Block) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		/*if (!visitor.visit(b).isUndefined())*/ RESULT = b;
	tds.pop(); nivel--;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              Block RESULT =null;
tds.push(new Ambiente(nivel++)) ; putParameters(); OffsetParametros = 8;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parameters ::= parameters COMMA type id 
            {
              LinkedList<DescriptorSimple> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<DescriptorSimple> p = (LinkedList<DescriptorSimple>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 DescriptorSimple desc = new DescriptorSimple(i,t);
   													desc.setOffset(OffsetParametros); 
													p.add(desc);
													OffsetParametros = OffsetParametros + 4;
													RESULT = p ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parameters ::= type id 
            {
              LinkedList<DescriptorSimple> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<DescriptorSimple> l = new LinkedList<DescriptorSimple>() ;
   								DescriptorSimple desc = new DescriptorSimple(i,t);
   								desc.setOffset(OffsetParametros);
								l.add(desc);
								OffsetParametros = OffsetParametros + 4;
								RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // method ::= type id LPAREN parameters NT$2 RPAREN block 
            {
              VarLocation RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (VarLocation) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<DescriptorSimple> p = (LinkedList<DescriptorSimple>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 b.setMethodName(i); 
						if (tds.top().get(i)==null){
								parser.asts.add(b);
								RESULT = new VarLocation(i,b,new DescriptorFuncion(i,t,p),ileft,iright) ;
							}
							else
								parser.report_fatal_error("Metodo redeclarado",ileft,iright);
						params = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$2 ::= 
            {
              VarLocation RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<DescriptorSimple> p = (LinkedList<DescriptorSimple>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
params = p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method ::= VOID id LPAREN parameters NT$1 RPAREN block 
            {
              VarLocation RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (VarLocation) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<DescriptorSimple> p = (LinkedList<DescriptorSimple>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  b.setMethodName(i); 
						if (tds.top().get(i)==null){
								parser.asts.add(b);
								RESULT = new VarLocation(i,b,new DescriptorFuncion(i,Type.VOID,p),ileft,iright) ;
							}
							else
								parser.report_fatal_error("Metodo redeclarado",ileft,iright);
						params = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              VarLocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<DescriptorSimple> p = (LinkedList<DescriptorSimple>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
params = p;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method ::= VOID id LPAREN RPAREN block 
            {
              VarLocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 b.setMethodName(i);    
						if (tds.top().get(i)==null){
								parser.asts.add(b);
								RESULT = new VarLocation(i,b,new DescriptorFuncion(i,Type.VOID,new LinkedList<DescriptorSimple>()),ileft,iright) ;
							}
							else 
								parser.report_fatal_error("Metodo redeclarado",ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method ::= type id LPAREN RPAREN block 
            {
              VarLocation RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 b.setMethodName(i);					    
						if (tds.top().get(i)==null){
								parser.asts.add(b);
								RESULT = new VarLocation(i,b,new DescriptorFuncion(i,t,new LinkedList<DescriptorSimple>()),ileft,iright) ;
							}
							else
								parser.report_fatal_error("Metodo redeclarado",ileft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method_decl ::= method_decl method 
            {
              Object RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarLocation m = (VarLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tds.top().put(m.getId(),m.getDesc()) ;Descriptor.setOffsetCorriente(0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method_decl ::= method 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarLocation m = (VarLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tds.top().put(m.getId(),m.getDesc()) ;Descriptor.setOffsetCorriente(0);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // location_decl ::= id LBRACKET int_literal RBRACKET 
            {
              VarLocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IntLiteral il = (IntLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if (tds.top().get(i)==null)
								RESULT = new VarLocation(i,new DescriptorArreglo(i,tipoVar,il.getValue()),ileft,iright,true,true) ;
							else
								parser.report_fatal_error("Variable redeclarada",ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // location_decl ::= id 
            {
              VarLocation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if (tds.top().get(i)==null)
								if(nivel == 0){
									RESULT = new VarLocation(i,new DescriptorSimple(i,tipoVar),ileft,iright,true,true);
								}else{
									RESULT = new VarLocation(i,new DescriptorSimple(i,tipoVar),ileft,iright,true,false);
								}		
							else
								parser.report_fatal_error("Variable redeclarada",ileft,iright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location_decl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // id_sequence ::= id_sequence COMMA location_decl 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarLocation l = (VarLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tds.top().put(l.getId(),l.getDesc()) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_sequence",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // id_sequence ::= location_decl 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarLocation l = (VarLocation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tds.top().put(l.getId(),l.getDesc()) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("id_sequence",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_decl ::= field_decl type id_sequence SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_decl ::= type id_sequence SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= field_decl method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= field_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= CLASS id LKEY RKEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= CLASS id LKEY NT$0 decl RKEY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.t=tds.clone(); tds.pop();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
 tds.push(new Ambiente(nivel++));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

