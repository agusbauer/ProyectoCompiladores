
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
package tpcompiladores;
import java_cup.runtime.*;
import java.lang.*;
import ir.*;
import tabladesimbolos.*;

/*atributos globales*/
TablaDeSimbolos t=new TablaDeSimbolos();
Type tipoVar;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).*/

/*LITERALES*/
terminal	Number  INT_LITERAL; 
terminal	Number  FLOAT_LITERAL;
terminal	String  STRING_LITERAL;
terminal	Character CHAR_LITERAL;
/*OPERADORES*/
terminal    PLUS, MINUS, TIMES, DIVIDE, MOD, AND, OR, NOT, EQ, NOTEQ, GT, LT, EQEQ, LTEQ, GTEQ, PLUSEQ, MINUSEQ;
/*SEPARADORES*/
terminal	SEMI,COMMA, LPAREN, RPAREN, LKEY, RKEY, LBRACKET, RBRACKET;	
/*PALABRAS RESERVADAS*/
terminal	BOOLEAN, BREAK, CLASS, CONTINUE, ELSE, IF, FOR, WHILE, FLOAT, INT, RETURN, VOID, EXTERNINVK;
terminal	Boolean TRUE;
terminal	Boolean FALSE;
/*IDENTIFICADORES*/
terminal	String IDENTIFIER;
   
/* Non terminals used in the grammar section.*/
non terminal      parameters, program, decl, field_decl,  method_decl, type, method_type, externinvk_parameters, 						    				  externinvk_arg_sequence,externinvk_arg, id_sequence, expr_sequence, block_content, method, statement_decl;
non terminal MethodCall method_call;
non terminal Location location, location_decl;
non terminal Expression expr;
non terminal Extern extern;
non terminal Statement statement;
non terminal Block block;
non terminal String id;
 
/*operadores*/
non terminal 	UnaryOpExpr unary_op;
non terminal 	BinOpType bin_op, arith_op, rel_op, eq_op, cond_op 
non terminal	AssignOpType assign_op;
/*literales*/
non terminal 	Literal literal;
non terminal 	IntLiteral int_literal;
non terminal 	BoolLiteral bool_literal;
non terminal 	FloatLiteral float_literal;
non terminal 	String string_literal;

   

/* -------------Precedence and Associatively of Terminals Section----------- */

precedence left OR;
precedence left AND;
precedence left LT, GT, LTEQ, GTEQ, NOTEQ, EQEQ;
precedence left PLUS, MINUS;   
precedence left TIMES, DIVIDE, MOD;
precedence left NOT, MINUS;

/* ----------------------------Grammar Section-------------------- */
   
   
   program ::= CLASS id LKEY {: t.push(new Ambiente());:} decl  RKEY {:t.pop();:}
			   |CLASS id LKEY RKEY;

   decl ::= field_decl
			| method_decl
			| field_decl method_decl;


   field_decl ::= type:t {:tipoVar = t;:} id_sequence	SEMI
				 | field_decl type id_sequence SEMI;

   id_sequence ::= location_decl:l {: t.top().put(l.getId(),l.getDesc()) ;:}
				| id_sequence COMMA location_decl:l {: t.top().put(l.getId(),l.getDesc()) ;:};


   location_decl ::= id {:  Descriptor d = t.search(id);
						if (d==null)
								RESULT = new VarLocation(id,new DescriptorSimple(id,tipoVar)) ;
							else
								System.out.println("ERROR: Variable redeclarada"); :} 
				| id LBRACKET int_literal:il RBRACKET {:  Descriptor d = t.search(id);
						if (d==null)
								RESULT = new VarLocation(id,new DescriptorArreglo(id,tipoVar,il)) ;
							else
								System.out.println("ERROR: Variable redeclarada"); :} ;
	

   method_decl ::= method
					| method_decl method;

   method	 ::= type id LPAREN RPAREN block
				    |VOID id LPAREN RPAREN block
					| VOID id LPAREN parameters RPAREN block 
					| type id LPAREN parameters RPAREN block ;

   parameters ::= type id
				| parameters COMMA type id;


   block ::=  LKEY {:t.push(new Ambiente()) ;:} block_content:b  RKEY {:t.pop();:} {: RESULT = b;:} ;

   block_content ::= statement_decl
					| field_decl
					| field_decl statement_decl
					|;

   type ::= INT {: RESULT = Type.INT ; :}
			| FLOAT {: RESULT = Type.FLOAT ; :}
			| BOOLEAN {: RESULT = Type.BOOL ; :};

   statement_decl ::= statement:s {: LinkedList<Statement> l = new LinkedList<Statement>() ;
									l.add(s);
									RESULT = l :} 
						| statement_decl:sd statement:s {:  sd.add(s);
															RESULT = sd ; :};

   statement ::= location:loc assign_op:aop expr:e SEMI {: RESULT = new AssignStmt(loc,aop,e) ; :}
			| method_call:m SEMI {: RESULT = m ; :}
			| extern:e SEMI {: RESULT = e ; :}
			| IF LPAREN expr:e RPAREN block:b1 ELSE block:b2 {: RESULT = new IfStmt(e,b1,b2) ; :}
			| IF LPAREN expr:e RPAREN block:b {: RESULT = new IfStmt(e,b) ; :}
			| FOR id:i EQ expr:e COMMA expr:c block:b {: RESULT = new ForStmt(i,e,c,b) ; :}
			| WHILE expr:e block:b {: RESULT = new WhileStmt(b,e) ; :}
			| RETURN expr:e SEMI {: RESULT = new ReturnStmt(e) ; :}
			| RETURN SEMI	{: RESULT = new ReturnStmt(); :}
			| BREAK SEMI    {: RESULT = new BreakStmt() ; :}
			| CONTINUE SEMI {: RESULT = new ContinueStmt() ; :}
			| SEMI  {: RESULT = new SkipStmt() ; :}
			| block:b {: RESULT = b ; :};


	assign_op ::= EQ {: RESULT = AssignOpType.ASSIGN;:}
				 | PLUSEQ  {: RESULT = AssignOpType.INCREMENT;:}
				 | MINUSEQ  {: RESULT = AssignOpType.DECREMENT;:};

	method_call ::= id LPAREN RPAREN {: Descriptor d = t.search(id);
										if (d!=null)
											if (d.getClase().equals("descriptorFuncion"))
												RESULT = new MethodCall(id,null) ;
											else
												System.out.println("ERROR: funcion no declarada");				
											else
												System.out.println("ERROR: Los tipos no concuerdan");:}
				| id LPAREN expr_sequence:l RPAREN {: Descriptor d = t.search(id);
										if (d!=null)
											if (d.getClase().equals("descriptorFuncion"))
												RESULT = new MethodCall(id,l) ;
											else
												System.out.println("ERROR: funcion no declarada");				
											else
												System.out.println("ERROR: Los tipos no concuerdan");:};

	extern ::=  EXTERNINVK LPAREN string_literal:s COMMA type RPAREN {: RESULT = new Extern(s,type,null)  ;:}
				| EXTERNINVK LPAREN string_literal:s COMMA VOID RPAREN {: RESULT = new Extern(s,null,null)  ;:}
				| EXTERNINVK LPAREN string_literal:s COMMA type COMMA externinvk_arg_sequence:l RPAREN {: RESULT = new Extern(s,type,l)  ;:}
				| EXTERNINVK LPAREN string_literal:s COMMA VOID COMMA externinvk_arg_sequence:l RPAREN {: RESULT = new Extern(s,null,l)  ;:};

	location ::= id {:  Descriptor d = t.search(id);
						if (d!=null)
							if (d.getClase().equals("descriptorSimple"))
								RESULT = new VarLocation(id,d) ;
							else
								System.out.println("ERROR: Variable no declarada");				
						else
							System.out.println("ERROR: Los tipos no concuerdan"); :} 
				| id LBRACKET expr RBRACKET {:  Descriptor d = t.search(id);
						if (d!=null)
							if (d.getClase().equals("descriptorArreglo"))
								RESULT = new VarLocation(id,d) ;
							else
								System.out.println("ERROR: Variable no declarada");				
						else
							System.out.println("ERROR: Los tipos no concuerdan"); :}  ;

	expr_sequence ::= expr:e {: LinkedList<Expression> l = new LinkedList<Expression>() ;
								l.add(e);
								RESULT = l :} 
					| expr_sequence:es COMMA expr:e {: es.add(e); 
													RESULT = es  ;:} ; 
 
	expr ::= location:loc {: RESULT =loc ; :}
		 | method_call:mc {: RESULT = mc ; :}
		 | extern:e {: RESULT = e  ;:}
		 | literal:l {: RESULT =l ; :} 
		 | expr:e bin_op:op expr:e2 {: RESULT = new BinOpExpr(e,op,e2) ; :}
		 | unary_op:op expr:e {: RESULT = new UnaryOpExpr(op,e) ; :}
		 | LPAREN expr:e RPAREN  {: RESULT = e; :};

	externinvk_arg_sequence ::= externinvk_arg:e {: LinkedList<Object> l = new LinkedList<Object>() ;
													l.add(e);
													RESULT = l :}  
								| externinvk_arg_sequence:es COMMA externinvk_arg:e {: es.add(e); 
																					RESULT = es  ;:} ; 
		 
	externinvk_arg ::= expr:e {: RESULT = e  ;:} 
					| string_literal:s {: RESULT = s  ;:};
	
	unary_op ::= NOT {: RESULT = UnaryOpType.NOT  ;:}
				| MINUS {: RESULT = UnaryOpType.MINUS  ;:};
	bin_op ::= arith_op:ao {: RESULT = ao  ;:}
				| rel_op:ro {: RESULT = ro ;:}
				| eq_op:eo {: RESULT = eo  ;:} 
				 | cond_op:co {: RESULT = co  ;:};
	arith_op ::= PLUS {: RESULT = BinOpType.PLUS  ;:}
				| MINUS{: RESULT = BinOpType.MINUS  ;:}
				 | TIMES {: RESULT = BinOpType.TIMES  ;:}
				| MOD {: RESULT = BinOpType.MOD  ;:}
				| DIVIDE {: RESULT = BinOpType.DIVIDE  ;:};
	rel_op ::= LT {: RESULT = BinOpType.LT  ;:}
			  | GT {: RESULT = BinOpType.GT  ;:} 
			  | LTEQ {: RESULT = BinOpType.LTEQ  ;:}
			  | GTEQ {: RESULT = BinOpType.GTEQ  ;:};
	eq_op ::= EQEQ {: RESULT = BinOpType.EQEQ  ;:} 
			  | NOTEQ {: RESULT = BinOpType.NOTEQ  ;:} ;
	cond_op ::= AND {: RESULT = BinOpType.AND  ;:} 
				| OR {: RESULT = BinOpType.OR  ;:};
	literal ::= int_literal:il {: RESULT = il ; :} | float_literal:fl {: RESULT = fl ; :} | bool_literal:bl {: RESULT = bl ; :};
	id ::= IDENTIFIER:i {: RESULT = i ;:};
	int_literal ::= INT_LITERAL:n {: RESULT = new IntLiteral(n) ;:};
	bool_literal ::= TRUE:t {: RESULT = new BooleanLiteral(t) ;:} 
					| FALSE:f {: RESULT = new BooleanLiteral(f) ;:} ;
	float_literal ::= FLOAT_LITERAL:f {: RESULT = new FloatLiteral(f);:} ;
	string_literal ::= STRING_LITERAL:s {: RESULT = s ;:};
